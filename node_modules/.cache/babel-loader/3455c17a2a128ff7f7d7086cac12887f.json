{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getRelativeFilePath = getRelativeFilePath;\nexports.getRootDirectory = getRootDirectory;\nexports.getFileMimeType = getFileMimeType;\n\nvar _lite = _interopRequireDefault(require(\"mime/lite\"));\n\nvar _pathBrowserify = _interopRequireDefault(require(\"path-browserify\"));\n\nvar _string = require(\"./string\");\n/**\n * Gets the path for the file.\n *\n * @param file - The file.\n * @returns - The path.\n */\n\n\nfunction getFilePath(file) {\n  /* istanbul ignore next */\n  return file.webkitRelativePath || file.path || file.name;\n}\n/**\n * Gets the file path relative to the root directory of the path, e.g. `bar` in `/foo/bar`.\n *\n * @param file - The input file.\n * @returns - The relative file path.\n */\n\n\nfunction getRelativeFilePath(file) {\n  const filePath = getFilePath(file);\n\n  const {\n    root,\n    dir,\n    base\n  } = _pathBrowserify.default.parse(filePath);\n\n  const relative = _pathBrowserify.default.normalize(dir).slice(root.length).split(_pathBrowserify.default.sep).slice(1);\n\n  return _pathBrowserify.default.join(...relative, base);\n}\n/**\n * Gets the root directory of the file path, e.g. `foo` in `/foo/bar`.\n *\n * @param file - The input file.\n * @returns - The root directory.\n */\n\n\nfunction getRootDirectory(file) {\n  const filePath = getFilePath(file);\n\n  const {\n    root,\n    dir\n  } = _pathBrowserify.default.parse(filePath);\n\n  return _pathBrowserify.default.normalize(dir).slice(root.length).split(_pathBrowserify.default.sep)[0];\n}\n/**\n * Get the file mime type. In case the type is not provided, use mime-db and try\n * to guess the file type based on the extension.\n *\n * @param file - The file.\n * @returns - The mime type.\n */\n\n\nfunction getFileMimeType(file) {\n  if (file.type) return file.type;\n\n  let {\n    ext\n  } = _pathBrowserify.default.parse(file.name);\n\n  ext = (0, _string.trimPrefix)(ext, \".\");\n\n  if (ext !== \"\") {\n    const mimeType = _lite.default.getType(ext);\n\n    if (mimeType) {\n      return mimeType;\n    }\n  }\n\n  return \"\";\n}","map":{"version":3,"sources":["C:/Users/Usama_Sadiq/Documents/React App/2/skapp-private/node_modules/@skynethub/userprofile-library/node_modules/skynet-js/dist/utils/file.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","getRelativeFilePath","getRootDirectory","getFileMimeType","_lite","_pathBrowserify","_string","getFilePath","file","webkitRelativePath","path","name","filePath","root","dir","base","default","parse","relative","normalize","slice","length","split","sep","join","type","ext","trimPrefix","mimeType","getType"],"mappings":"AAAA;;AAEA,IAAIA,sBAAsB,GAAGC,OAAO,CAAC,8CAAD,CAApC;;AAEAC,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,mBAAR,GAA8BA,mBAA9B;AACAF,OAAO,CAACG,gBAAR,GAA2BA,gBAA3B;AACAH,OAAO,CAACI,eAAR,GAA0BA,eAA1B;;AAEA,IAAIC,KAAK,GAAGT,sBAAsB,CAACC,OAAO,CAAC,WAAD,CAAR,CAAlC;;AAEA,IAAIS,eAAe,GAAGV,sBAAsB,CAACC,OAAO,CAAC,iBAAD,CAAR,CAA5C;;AAEA,IAAIU,OAAO,GAAGV,OAAO,CAAC,UAAD,CAArB;AAEA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASW,WAAT,CAAqBC,IAArB,EAA2B;AACzB;AACA,SAAOA,IAAI,CAACC,kBAAL,IAA2BD,IAAI,CAACE,IAAhC,IAAwCF,IAAI,CAACG,IAApD;AACD;AACD;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAASV,mBAAT,CAA6BO,IAA7B,EAAmC;AACjC,QAAMI,QAAQ,GAAGL,WAAW,CAACC,IAAD,CAA5B;;AAEA,QAAM;AACJK,IAAAA,IADI;AAEJC,IAAAA,GAFI;AAGJC,IAAAA;AAHI,MAIFV,eAAe,CAACW,OAAhB,CAAwBC,KAAxB,CAA8BL,QAA9B,CAJJ;;AAMA,QAAMM,QAAQ,GAAGb,eAAe,CAACW,OAAhB,CAAwBG,SAAxB,CAAkCL,GAAlC,EAAuCM,KAAvC,CAA6CP,IAAI,CAACQ,MAAlD,EAA0DC,KAA1D,CAAgEjB,eAAe,CAACW,OAAhB,CAAwBO,GAAxF,EAA6FH,KAA7F,CAAmG,CAAnG,CAAjB;;AAEA,SAAOf,eAAe,CAACW,OAAhB,CAAwBQ,IAAxB,CAA6B,GAAGN,QAAhC,EAA0CH,IAA1C,CAAP;AACD;AACD;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAASb,gBAAT,CAA0BM,IAA1B,EAAgC;AAC9B,QAAMI,QAAQ,GAAGL,WAAW,CAACC,IAAD,CAA5B;;AAEA,QAAM;AACJK,IAAAA,IADI;AAEJC,IAAAA;AAFI,MAGFT,eAAe,CAACW,OAAhB,CAAwBC,KAAxB,CAA8BL,QAA9B,CAHJ;;AAKA,SAAOP,eAAe,CAACW,OAAhB,CAAwBG,SAAxB,CAAkCL,GAAlC,EAAuCM,KAAvC,CAA6CP,IAAI,CAACQ,MAAlD,EAA0DC,KAA1D,CAAgEjB,eAAe,CAACW,OAAhB,CAAwBO,GAAxF,EAA6F,CAA7F,CAAP;AACD;AACD;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAASpB,eAAT,CAAyBK,IAAzB,EAA+B;AAC7B,MAAIA,IAAI,CAACiB,IAAT,EAAe,OAAOjB,IAAI,CAACiB,IAAZ;;AAEf,MAAI;AACFC,IAAAA;AADE,MAEArB,eAAe,CAACW,OAAhB,CAAwBC,KAAxB,CAA8BT,IAAI,CAACG,IAAnC,CAFJ;;AAIAe,EAAAA,GAAG,GAAG,CAAC,GAAGpB,OAAO,CAACqB,UAAZ,EAAwBD,GAAxB,EAA6B,GAA7B,CAAN;;AAEA,MAAIA,GAAG,KAAK,EAAZ,EAAgB;AACd,UAAME,QAAQ,GAAGxB,KAAK,CAACY,OAAN,CAAca,OAAd,CAAsBH,GAAtB,CAAjB;;AAEA,QAAIE,QAAJ,EAAc;AACZ,aAAOA,QAAP;AACD;AACF;;AAED,SAAO,EAAP;AACD","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getRelativeFilePath = getRelativeFilePath;\nexports.getRootDirectory = getRootDirectory;\nexports.getFileMimeType = getFileMimeType;\n\nvar _lite = _interopRequireDefault(require(\"mime/lite\"));\n\nvar _pathBrowserify = _interopRequireDefault(require(\"path-browserify\"));\n\nvar _string = require(\"./string\");\n\n/**\n * Gets the path for the file.\n *\n * @param file - The file.\n * @returns - The path.\n */\nfunction getFilePath(file) {\n  /* istanbul ignore next */\n  return file.webkitRelativePath || file.path || file.name;\n}\n/**\n * Gets the file path relative to the root directory of the path, e.g. `bar` in `/foo/bar`.\n *\n * @param file - The input file.\n * @returns - The relative file path.\n */\n\n\nfunction getRelativeFilePath(file) {\n  const filePath = getFilePath(file);\n\n  const {\n    root,\n    dir,\n    base\n  } = _pathBrowserify.default.parse(filePath);\n\n  const relative = _pathBrowserify.default.normalize(dir).slice(root.length).split(_pathBrowserify.default.sep).slice(1);\n\n  return _pathBrowserify.default.join(...relative, base);\n}\n/**\n * Gets the root directory of the file path, e.g. `foo` in `/foo/bar`.\n *\n * @param file - The input file.\n * @returns - The root directory.\n */\n\n\nfunction getRootDirectory(file) {\n  const filePath = getFilePath(file);\n\n  const {\n    root,\n    dir\n  } = _pathBrowserify.default.parse(filePath);\n\n  return _pathBrowserify.default.normalize(dir).slice(root.length).split(_pathBrowserify.default.sep)[0];\n}\n/**\n * Get the file mime type. In case the type is not provided, use mime-db and try\n * to guess the file type based on the extension.\n *\n * @param file - The file.\n * @returns - The mime type.\n */\n\n\nfunction getFileMimeType(file) {\n  if (file.type) return file.type;\n\n  let {\n    ext\n  } = _pathBrowserify.default.parse(file.name);\n\n  ext = (0, _string.trimPrefix)(ext, \".\");\n\n  if (ext !== \"\") {\n    const mimeType = _lite.default.getType(ext);\n\n    if (mimeType) {\n      return mimeType;\n    }\n  }\n\n  return \"\";\n}"]},"metadata":{},"sourceType":"script"}