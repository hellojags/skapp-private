{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getJSON = getJSON;\nexports.setJSON = setJSON;\nexports.getOrCreateRegistryEntry = getOrCreateRegistryEntry;\nexports.defaultSetJSONOptions = exports.defaultGetJSONOptions = exports.JSON_RESPONSE_VERSION = void 0;\n\nvar _tweetnacl = require(\"tweetnacl\");\n\nvar _registry = require(\"./registry\");\n\nvar _number = require(\"./utils/number\");\n\nvar _skylink = require(\"./utils/skylink\");\n\nvar _string = require(\"./utils/string\");\n\nvar _upload = require(\"./upload\");\n\nvar _download = require(\"./download\");\n\nvar _validation = require(\"./utils/validation\");\n\nvar _options = require(\"./utils/options\");\n\nconst JSON_RESPONSE_VERSION = 2;\nexports.JSON_RESPONSE_VERSION = JSON_RESPONSE_VERSION;\nconst defaultGetJSONOptions = { ..._registry.defaultGetEntryOptions,\n  ..._download.defaultDownloadOptions\n};\n/**\n * Custom set JSON options.\n */\n\nexports.defaultGetJSONOptions = defaultGetJSONOptions;\nconst defaultSetJSONOptions = { ...defaultGetJSONOptions,\n  ..._registry.defaultSetEntryOptions,\n  ..._upload.defaultUploadOptions\n};\nexports.defaultSetJSONOptions = defaultSetJSONOptions;\n/**\n * Gets the JSON object corresponding to the publicKey and dataKey.\n *\n * @param this - SkynetClient\n * @param publicKey - The user public key.\n * @param dataKey - The key of the data to fetch for the given user.\n * @param [customOptions] - Additional settings that can optionally be set.\n * @returns - The returned JSON and revision number.\n * @throws - Will throw if the returned signature does not match the returned entry, or if the skylink in the entry is invalid.\n */\n\nasync function getJSON(publicKey, dataKey, customOptions) {\n  (0, _validation.validateOptionalObject)(\"customOptions\", customOptions, \"parameter\", defaultGetJSONOptions); // Rest of validation is done in `getEntry`.\n\n  const opts = { ...defaultGetJSONOptions,\n    ...this.customOptions,\n    ...customOptions\n  }; // Lookup the registry entry.\n\n  const getEntryOpts = (0, _options.extractOptions)(opts, _registry.defaultGetEntryOptions);\n  const {\n    entry\n  } = await this.registry.getEntry(publicKey, dataKey, getEntryOpts);\n\n  if (entry === null) {\n    return {\n      data: null,\n      skylink: null\n    };\n  } // Download the data in that Skylink.\n\n\n  const skylink = entry.data;\n  const downloadOpts = (0, _options.extractOptions)(opts, _download.defaultDownloadOptions);\n  const {\n    data\n  } = await this.getFileContent(skylink, downloadOpts);\n\n  if (typeof data !== \"object\" || data === null) {\n    throw new Error(\"File data for the entry at data key '\".concat(dataKey, \"' is not JSON.\"));\n  }\n\n  if (!(data[\"_data\"] && data[\"_v\"])) {\n    // Legacy data prior to v4, return as-is.\n    return {\n      data,\n      skylink\n    };\n  }\n\n  const actualData = data[\"_data\"];\n\n  if (typeof actualData !== \"object\" || data === null) {\n    throw new Error(\"File data '_data' for the entry at data key '\".concat(dataKey, \"' is not JSON.\"));\n  }\n\n  return {\n    data: actualData,\n    skylink\n  };\n}\n/**\n * Sets a JSON object at the registry entry corresponding to the publicKey and dataKey.\n *\n * @param this - SkynetClient\n * @param privateKey - The user private key.\n * @param dataKey - The key of the data to fetch for the given user.\n * @param json - The JSON data to set.\n * @param [customOptions] - Additional settings that can optionally be set.\n * @throws - Will throw if the input keys are not valid strings.\n */\n\n\nasync function setJSON(privateKey, dataKey, json, customOptions) {\n  (0, _validation.validateHexString)(\"privateKey\", privateKey, \"parameter\");\n  (0, _validation.validateString)(\"dataKey\", dataKey, \"parameter\");\n  (0, _validation.validateObject)(\"json\", json, \"parameter\");\n  (0, _validation.validateOptionalObject)(\"customOptions\", customOptions, \"parameter\", defaultSetJSONOptions);\n  const opts = { ...defaultSetJSONOptions,\n    ...this.customOptions,\n    ...customOptions\n  };\n\n  const {\n    publicKey: publicKeyArray\n  } = _tweetnacl.sign.keyPair.fromSecretKey((0, _string.hexToUint8Array)(privateKey));\n\n  const [entry, skylink] = await getOrCreateRegistryEntry(this, publicKeyArray, dataKey, json, opts); // Update the registry.\n\n  const setEntryOpts = (0, _options.extractOptions)(opts, _registry.defaultSetEntryOptions);\n  await this.registry.setEntry(privateKey, entry, setEntryOpts);\n  return {\n    data: json,\n    skylink\n  };\n}\n\nasync function getOrCreateRegistryEntry(client, publicKeyArray, dataKey, json, customOptions) {\n  // Not publicly available, don't validate input.\n  const opts = { ...defaultSetJSONOptions,\n    ...client.customOptions,\n    ...customOptions\n  }; // Set the hidden _data and _v fields.\n\n  const data = {\n    _data: json,\n    _v: JSON_RESPONSE_VERSION\n  }; // Create the data to upload to acquire its skylink.\n\n  let dataKeyHex = dataKey;\n\n  if (!opts.hashedDataKeyHex) {\n    dataKeyHex = (0, _string.toHexString)((0, _string.stringToUint8ArrayUtf8)(dataKey));\n  }\n\n  const file = new File([JSON.stringify(data)], \"dk:\".concat(dataKeyHex), {\n    type: \"application/json\"\n  }); // Start file upload, do not block.\n\n  const uploadOpts = (0, _options.extractOptions)(opts, _upload.defaultUploadOptions);\n  const skyfilePromise = client.uploadFile(file, uploadOpts); // Fetch the current value to find out the revision.\n  //\n  // Start getEntry, do not block.\n\n  const getEntryOpts = (0, _options.extractOptions)(opts, _registry.defaultGetEntryOptions);\n  const entryPromise = client.registry.getEntry((0, _string.toHexString)(publicKeyArray), dataKey, getEntryOpts); // Block until both getEntry and uploadFile are finished.\n\n  const [signedEntry, skyfile] = await Promise.all([entryPromise, skyfilePromise]);\n  let revision;\n\n  if (signedEntry.entry === null) {\n    revision = BigInt(0);\n  } else {\n    revision = signedEntry.entry.revision + BigInt(1);\n  } // Throw if the revision is already the maximum value.\n\n\n  if (revision > _number.MAX_REVISION) {\n    throw new Error(\"Current entry already has maximum allowed revision, could not update the entry\");\n  } // Assert the input is 64 bits.\n\n\n  (0, _number.assertUint64)(revision); // Build the registry value.\n\n  const skylink = skyfile.skylink;\n  const entry = {\n    dataKey,\n    data: (0, _string.trimUriPrefix)(skylink, _skylink.uriSkynetPrefix),\n    revision\n  };\n  return [entry, skylink];\n}","map":{"version":3,"sources":["C:/Users/Usama_Sadiq/Documents/React App/2/skapp-private/node_modules/@skynetlabs/content-record-library/node_modules/skynet-js/dist/skydb.js"],"names":["Object","defineProperty","exports","value","getJSON","setJSON","getOrCreateRegistryEntry","defaultSetJSONOptions","defaultGetJSONOptions","JSON_RESPONSE_VERSION","_tweetnacl","require","_registry","_number","_skylink","_string","_upload","_download","_validation","_options","defaultGetEntryOptions","defaultDownloadOptions","defaultSetEntryOptions","defaultUploadOptions","publicKey","dataKey","customOptions","validateOptionalObject","opts","getEntryOpts","extractOptions","entry","registry","getEntry","data","skylink","downloadOpts","getFileContent","Error","concat","actualData","privateKey","json","validateHexString","validateString","validateObject","publicKeyArray","sign","keyPair","fromSecretKey","hexToUint8Array","setEntryOpts","setEntry","client","_data","_v","dataKeyHex","hashedDataKeyHex","toHexString","stringToUint8ArrayUtf8","file","File","JSON","stringify","type","uploadOpts","skyfilePromise","uploadFile","entryPromise","signedEntry","skyfile","Promise","all","revision","BigInt","MAX_REVISION","assertUint64","trimUriPrefix","uriSkynetPrefix"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getJSON = getJSON;\nexports.setJSON = setJSON;\nexports.getOrCreateRegistryEntry = getOrCreateRegistryEntry;\nexports.defaultSetJSONOptions = exports.defaultGetJSONOptions = exports.JSON_RESPONSE_VERSION = void 0;\n\nvar _tweetnacl = require(\"tweetnacl\");\n\nvar _registry = require(\"./registry\");\n\nvar _number = require(\"./utils/number\");\n\nvar _skylink = require(\"./utils/skylink\");\n\nvar _string = require(\"./utils/string\");\n\nvar _upload = require(\"./upload\");\n\nvar _download = require(\"./download\");\n\nvar _validation = require(\"./utils/validation\");\n\nvar _options = require(\"./utils/options\");\n\nconst JSON_RESPONSE_VERSION = 2;\nexports.JSON_RESPONSE_VERSION = JSON_RESPONSE_VERSION;\nconst defaultGetJSONOptions = { ..._registry.defaultGetEntryOptions,\n  ..._download.defaultDownloadOptions\n};\n/**\n * Custom set JSON options.\n */\n\nexports.defaultGetJSONOptions = defaultGetJSONOptions;\nconst defaultSetJSONOptions = { ...defaultGetJSONOptions,\n  ..._registry.defaultSetEntryOptions,\n  ..._upload.defaultUploadOptions\n};\nexports.defaultSetJSONOptions = defaultSetJSONOptions;\n\n/**\n * Gets the JSON object corresponding to the publicKey and dataKey.\n *\n * @param this - SkynetClient\n * @param publicKey - The user public key.\n * @param dataKey - The key of the data to fetch for the given user.\n * @param [customOptions] - Additional settings that can optionally be set.\n * @returns - The returned JSON and revision number.\n * @throws - Will throw if the returned signature does not match the returned entry, or if the skylink in the entry is invalid.\n */\nasync function getJSON(publicKey, dataKey, customOptions) {\n  (0, _validation.validateOptionalObject)(\"customOptions\", customOptions, \"parameter\", defaultGetJSONOptions); // Rest of validation is done in `getEntry`.\n\n  const opts = { ...defaultGetJSONOptions,\n    ...this.customOptions,\n    ...customOptions\n  }; // Lookup the registry entry.\n\n  const getEntryOpts = (0, _options.extractOptions)(opts, _registry.defaultGetEntryOptions);\n  const {\n    entry\n  } = await this.registry.getEntry(publicKey, dataKey, getEntryOpts);\n\n  if (entry === null) {\n    return {\n      data: null,\n      skylink: null\n    };\n  } // Download the data in that Skylink.\n\n\n  const skylink = entry.data;\n  const downloadOpts = (0, _options.extractOptions)(opts, _download.defaultDownloadOptions);\n  const {\n    data\n  } = await this.getFileContent(skylink, downloadOpts);\n\n  if (typeof data !== \"object\" || data === null) {\n    throw new Error(\"File data for the entry at data key '\".concat(dataKey, \"' is not JSON.\"));\n  }\n\n  if (!(data[\"_data\"] && data[\"_v\"])) {\n    // Legacy data prior to v4, return as-is.\n    return {\n      data,\n      skylink\n    };\n  }\n\n  const actualData = data[\"_data\"];\n\n  if (typeof actualData !== \"object\" || data === null) {\n    throw new Error(\"File data '_data' for the entry at data key '\".concat(dataKey, \"' is not JSON.\"));\n  }\n\n  return {\n    data: actualData,\n    skylink\n  };\n}\n/**\n * Sets a JSON object at the registry entry corresponding to the publicKey and dataKey.\n *\n * @param this - SkynetClient\n * @param privateKey - The user private key.\n * @param dataKey - The key of the data to fetch for the given user.\n * @param json - The JSON data to set.\n * @param [customOptions] - Additional settings that can optionally be set.\n * @throws - Will throw if the input keys are not valid strings.\n */\n\n\nasync function setJSON(privateKey, dataKey, json, customOptions) {\n  (0, _validation.validateHexString)(\"privateKey\", privateKey, \"parameter\");\n  (0, _validation.validateString)(\"dataKey\", dataKey, \"parameter\");\n  (0, _validation.validateObject)(\"json\", json, \"parameter\");\n  (0, _validation.validateOptionalObject)(\"customOptions\", customOptions, \"parameter\", defaultSetJSONOptions);\n  const opts = { ...defaultSetJSONOptions,\n    ...this.customOptions,\n    ...customOptions\n  };\n\n  const {\n    publicKey: publicKeyArray\n  } = _tweetnacl.sign.keyPair.fromSecretKey((0, _string.hexToUint8Array)(privateKey));\n\n  const [entry, skylink] = await getOrCreateRegistryEntry(this, publicKeyArray, dataKey, json, opts); // Update the registry.\n\n  const setEntryOpts = (0, _options.extractOptions)(opts, _registry.defaultSetEntryOptions);\n  await this.registry.setEntry(privateKey, entry, setEntryOpts);\n  return {\n    data: json,\n    skylink\n  };\n}\n\nasync function getOrCreateRegistryEntry(client, publicKeyArray, dataKey, json, customOptions) {\n  // Not publicly available, don't validate input.\n  const opts = { ...defaultSetJSONOptions,\n    ...client.customOptions,\n    ...customOptions\n  }; // Set the hidden _data and _v fields.\n\n  const data = {\n    _data: json,\n    _v: JSON_RESPONSE_VERSION\n  }; // Create the data to upload to acquire its skylink.\n\n  let dataKeyHex = dataKey;\n\n  if (!opts.hashedDataKeyHex) {\n    dataKeyHex = (0, _string.toHexString)((0, _string.stringToUint8ArrayUtf8)(dataKey));\n  }\n\n  const file = new File([JSON.stringify(data)], \"dk:\".concat(dataKeyHex), {\n    type: \"application/json\"\n  }); // Start file upload, do not block.\n\n  const uploadOpts = (0, _options.extractOptions)(opts, _upload.defaultUploadOptions);\n  const skyfilePromise = client.uploadFile(file, uploadOpts); // Fetch the current value to find out the revision.\n  //\n  // Start getEntry, do not block.\n\n  const getEntryOpts = (0, _options.extractOptions)(opts, _registry.defaultGetEntryOptions);\n  const entryPromise = client.registry.getEntry((0, _string.toHexString)(publicKeyArray), dataKey, getEntryOpts); // Block until both getEntry and uploadFile are finished.\n\n  const [signedEntry, skyfile] = await Promise.all([entryPromise, skyfilePromise]);\n  let revision;\n\n  if (signedEntry.entry === null) {\n    revision = BigInt(0);\n  } else {\n    revision = signedEntry.entry.revision + BigInt(1);\n  } // Throw if the revision is already the maximum value.\n\n\n  if (revision > _number.MAX_REVISION) {\n    throw new Error(\"Current entry already has maximum allowed revision, could not update the entry\");\n  } // Assert the input is 64 bits.\n\n\n  (0, _number.assertUint64)(revision); // Build the registry value.\n\n  const skylink = skyfile.skylink;\n  const entry = {\n    dataKey,\n    data: (0, _string.trimUriPrefix)(skylink, _skylink.uriSkynetPrefix),\n    revision\n  };\n  return [entry, skylink];\n}"]},"metadata":{},"sourceType":"script"}