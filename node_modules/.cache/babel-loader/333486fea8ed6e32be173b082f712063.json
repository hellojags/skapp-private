{"ast":null,"code":"import { ofType } from \"redux-observable\";\nimport { switchMap, map } from \"rxjs/operators\";\nimport { from } from \"rxjs\";\nimport { setLoaderDisplay } from \"./SnLoaderAction\";\nimport { EPIC_TY_INSTALLED_APP, EPIC_TY_GET_MY_INSTALLED_APPS, EPIC_TY_UNINSTALLED_APP, EPIC_TY_INSTALLED_FOR_LOGIN_APP } from \"../SnActionConstants\";\nimport { getMyInstalledApps, installApp, uninstallApp } from \"../../service/SnSkappService\";\nimport { setInstalledAppsStore, installedAppActionForLogin } from \"./SnInstalledAppAction\"; // app stats actions\n\nimport store from \"../../redux\";\nexport const snSetInstallAppEpic = action$ => action$.pipe(ofType(EPIC_TY_INSTALLED_APP), // do we need to change this to mergemap ? we dont want subscription to be overwritten\nswitchMap(action => {\n  console.log(\"snInstalledAppEpic \", action);\n  store.dispatch(setLoaderDisplay(true));\n  return from(installApp(action.payload)) // must return all published app\n  .pipe(map(res => {\n    store.dispatch(installedAppActionForLogin(null));\n    store.dispatch(setLoaderDisplay(false));\n    return setInstalledAppsStore(res);\n  }));\n}));\nexport const snSetUnInstallAppEpic = action$ => action$.pipe(ofType(EPIC_TY_UNINSTALLED_APP), // do we need to change this to mergemap ? we dont want subscription to be overwritten\nswitchMap(action => {\n  console.log(\"snUnInstalledAppEpic \", action);\n  store.dispatch(setLoaderDisplay(true));\n  return from(uninstallApp(action.payload)) // must return all published app\n  .pipe(map(res => {\n    store.dispatch(installedAppActionForLogin(null));\n    store.dispatch(setLoaderDisplay(false));\n    return setInstalledAppsStore(res);\n  }));\n}));\nexport const snGetInstalledAppsEpic = action$ => action$.pipe(ofType(EPIC_TY_GET_MY_INSTALLED_APPS), // do we need to change this to mergemap ? we dont want subscription to be overwritten\nswitchMap(action => {\n  store.dispatch(setLoaderDisplay(true));\n  return from(getMyInstalledApps()).pipe(map(res => {\n    store.dispatch(setLoaderDisplay(false)); // Update Redux Store\n\n    return setInstalledAppsStore(res);\n  }));\n}));","map":{"version":3,"sources":["C:/Users/Usama_Sadiq/Documents/React App/2/skapp-private/src/redux/action-reducers-epic/SnInstalledAppEpic.js"],"names":["ofType","switchMap","map","from","setLoaderDisplay","EPIC_TY_INSTALLED_APP","EPIC_TY_GET_MY_INSTALLED_APPS","EPIC_TY_UNINSTALLED_APP","EPIC_TY_INSTALLED_FOR_LOGIN_APP","getMyInstalledApps","installApp","uninstallApp","setInstalledAppsStore","installedAppActionForLogin","store","snSetInstallAppEpic","action$","pipe","action","console","log","dispatch","payload","res","snSetUnInstallAppEpic","snGetInstalledAppsEpic"],"mappings":"AAAA,SAASA,MAAT,QAAuB,kBAAvB;AACA,SAASC,SAAT,EAAoBC,GAApB,QAA+B,gBAA/B;AACA,SAASC,IAAT,QAAqB,MAArB;AACA,SAASC,gBAAT,QAAiC,kBAAjC;AACA,SACIC,qBADJ,EAC2BC,6BAD3B,EAEIC,uBAFJ,EAE6BC,+BAF7B,QAGO,sBAHP;AAIA,SAASC,kBAAT,EAA6BC,UAA7B,EAAyCC,YAAzC,QAA6D,8BAA7D;AACA,SAASC,qBAAT,EAAgCC,0BAAhC,QAAkE,wBAAlE,C,CACA;;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAO,MAAMC,mBAAmB,GAAIC,OAAD,IAC/BA,OAAO,CACHC,IADJ,CACSjB,MAAM,CAACK,qBAAD,CADf,EAEQ;AACAJ,SAAS,CAAEiB,MAAD,IAAY;AAClBC,EAAAA,OAAO,CAACC,GAAR,CAAY,qBAAZ,EAAmCF,MAAnC;AACAJ,EAAAA,KAAK,CAACO,QAAN,CAAejB,gBAAgB,CAAC,IAAD,CAA/B;AACA,SAAOD,IAAI,CAACO,UAAU,CAACQ,MAAM,CAACI,OAAR,CAAX,CAAJ,CAAiC;AAAjC,GACFL,IADE,CAECf,GAAG,CAAEqB,GAAD,IAAS;AACTT,IAAAA,KAAK,CAACO,QAAN,CAAeR,0BAA0B,CAAC,IAAD,CAAzC;AACAC,IAAAA,KAAK,CAACO,QAAN,CAAejB,gBAAgB,CAAC,KAAD,CAA/B;AACA,WAAOQ,qBAAqB,CAACW,GAAD,CAA5B;AACH,GAJE,CAFJ,CAAP;AAQH,CAXQ,CAHjB,CADG;AAgBP,OAAO,MAAMC,qBAAqB,GAAIR,OAAD,IACjCA,OAAO,CACHC,IADJ,CACSjB,MAAM,CAACO,uBAAD,CADf,EAEQ;AACAN,SAAS,CAAEiB,MAAD,IAAY;AAClBC,EAAAA,OAAO,CAACC,GAAR,CAAY,uBAAZ,EAAqCF,MAArC;AACAJ,EAAAA,KAAK,CAACO,QAAN,CAAejB,gBAAgB,CAAC,IAAD,CAA/B;AACA,SAAOD,IAAI,CAACQ,YAAY,CAACO,MAAM,CAACI,OAAR,CAAb,CAAJ,CAAmC;AAAnC,GACFL,IADE,CAECf,GAAG,CAAEqB,GAAD,IAAS;AACTT,IAAAA,KAAK,CAACO,QAAN,CAAeR,0BAA0B,CAAC,IAAD,CAAzC;AACAC,IAAAA,KAAK,CAACO,QAAN,CAAejB,gBAAgB,CAAC,KAAD,CAA/B;AACA,WAAOQ,qBAAqB,CAACW,GAAD,CAA5B;AACH,GAJE,CAFJ,CAAP;AAQH,CAXQ,CAHjB,CADG;AAgBP,OAAO,MAAME,sBAAsB,GAAIT,OAAD,IAClCA,OAAO,CACHC,IADJ,CACSjB,MAAM,CAACM,6BAAD,CADf,EAEQ;AAEAL,SAAS,CAAEiB,MAAD,IAAY;AAClBJ,EAAAA,KAAK,CAACO,QAAN,CAAejB,gBAAgB,CAAC,IAAD,CAA/B;AACA,SAAOD,IAAI,CAACM,kBAAkB,EAAnB,CAAJ,CACFQ,IADE,CAECf,GAAG,CAAEqB,GAAD,IAAS;AACTT,IAAAA,KAAK,CAACO,QAAN,CAAejB,gBAAgB,CAAC,KAAD,CAA/B,EADS,CAET;;AACA,WAAOQ,qBAAqB,CAACW,GAAD,CAA5B;AACH,GAJE,CAFJ,CAAP;AAQH,CAVQ,CAJjB,CADG","sourcesContent":["import { ofType } from \"redux-observable\"\r\nimport { switchMap, map } from \"rxjs/operators\"\r\nimport { from } from \"rxjs\"\r\nimport { setLoaderDisplay } from \"./SnLoaderAction\"\r\nimport {\r\n    EPIC_TY_INSTALLED_APP, EPIC_TY_GET_MY_INSTALLED_APPS,\r\n    EPIC_TY_UNINSTALLED_APP, EPIC_TY_INSTALLED_FOR_LOGIN_APP\r\n} from \"../SnActionConstants\";\r\nimport { getMyInstalledApps, installApp, uninstallApp } from \"../../service/SnSkappService\"\r\nimport { setInstalledAppsStore, installedAppActionForLogin } from \"./SnInstalledAppAction\"\r\n// app stats actions\r\nimport store from \"../../redux\"\r\nexport const snSetInstallAppEpic = (action$) =>\r\n    action$.\r\n        pipe(ofType(EPIC_TY_INSTALLED_APP),\r\n            // do we need to change this to mergemap ? we dont want subscription to be overwritten\r\n            switchMap((action) => {\r\n                console.log(\"snInstalledAppEpic \", action)\r\n                store.dispatch(setLoaderDisplay(true))\r\n                return from(installApp(action.payload)) // must return all published app\r\n                    .pipe(\r\n                        map((res) => {\r\n                            store.dispatch(installedAppActionForLogin(null));\r\n                            store.dispatch(setLoaderDisplay(false))\r\n                            return setInstalledAppsStore(res)\r\n                        })\r\n                    )\r\n            }));\r\nexport const snSetUnInstallAppEpic = (action$) =>\r\n    action$.\r\n        pipe(ofType(EPIC_TY_UNINSTALLED_APP),\r\n            // do we need to change this to mergemap ? we dont want subscription to be overwritten\r\n            switchMap((action) => {\r\n                console.log(\"snUnInstalledAppEpic \", action)\r\n                store.dispatch(setLoaderDisplay(true))\r\n                return from(uninstallApp(action.payload)) // must return all published app\r\n                    .pipe(\r\n                        map((res) => {\r\n                            store.dispatch(installedAppActionForLogin(null));\r\n                            store.dispatch(setLoaderDisplay(false))\r\n                            return setInstalledAppsStore(res)\r\n                        })\r\n                    )\r\n            }));\r\nexport const snGetInstalledAppsEpic = (action$) =>\r\n    action$.\r\n        pipe(ofType(EPIC_TY_GET_MY_INSTALLED_APPS),\r\n            // do we need to change this to mergemap ? we dont want subscription to be overwritten\r\n\r\n            switchMap((action) => {\r\n                store.dispatch(setLoaderDisplay(true))\r\n                return from(getMyInstalledApps())\r\n                    .pipe(\r\n                        map((res) => {\r\n                            store.dispatch(setLoaderDisplay(false))\r\n                            // Update Redux Store\r\n                            return setInstalledAppsStore(res)\r\n                        })\r\n                    )\r\n            }));\r\n\r\n"]},"metadata":{},"sourceType":"module"}