{"ast":null,"code":"\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SkynetClient = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _axios = _interopRequireDefault(require(\"axios\"));\n\nvar _upload = require(\"./upload\");\n\nvar _download = require(\"./download\");\n\nvar _file = require(\"./file\");\n\nvar _skydb = require(\"./skydb\");\n\nvar _registry = require(\"./registry\");\n\nvar _url = require(\"./utils/url\");\n\nvar _mysky = require(\"./mysky\");\n\nvar _utils = require(\"./mysky/utils\");\n/**\n * The Skynet Client which can be used to access Skynet.\n */\n\n\nclass SkynetClient {\n  // The initial portal URL, either given to `new SkynetClient()` or if not, the value of `defaultPortalUrl()`.\n  // The resolved API portal URL. The request won't be made until needed, or `initPortalUrl()` is called. The request is only made once, for all Skynet Clients.\n  // The given portal URL, if one was passed in to `new SkynetClient()`.\n  // Set methods (defined in other files).\n  // Upload\n  // Download\n  // MySky\n  // File API\n  // SkyDB\n  // SkyDB helpers\n\n  /**\n   * The Skynet Client which can be used to access Skynet.\n   *\n   * @class\n   * @param [initialPortalUrl] The initial portal URL to use to access Skynet, if specified. A request will be made to this URL to get the actual portal URL. To use the default portal while passing custom options, pass \"\".\n   * @param [customOptions] Configuration for the client.\n   */\n  constructor(initialPortalUrl = \"\", customOptions = {}) {\n    (0, _defineProperty2.default)(this, \"customOptions\", void 0);\n    (0, _defineProperty2.default)(this, \"initialPortalUrl\", void 0);\n    (0, _defineProperty2.default)(this, \"givenPortalUrl\", void 0);\n    (0, _defineProperty2.default)(this, \"uploadFile\", _upload.uploadFile);\n    (0, _defineProperty2.default)(this, \"uploadFileRequest\", _upload.uploadFileRequest);\n    (0, _defineProperty2.default)(this, \"uploadDirectory\", _upload.uploadDirectory);\n    (0, _defineProperty2.default)(this, \"uploadDirectoryRequest\", _upload.uploadDirectoryRequest);\n    (0, _defineProperty2.default)(this, \"downloadFile\", _download.downloadFile);\n    (0, _defineProperty2.default)(this, \"downloadFileHns\", _download.downloadFileHns);\n    (0, _defineProperty2.default)(this, \"getSkylinkUrl\", _download.getSkylinkUrl);\n    (0, _defineProperty2.default)(this, \"getHnsUrl\", _download.getHnsUrl);\n    (0, _defineProperty2.default)(this, \"getHnsresUrl\", _download.getHnsresUrl);\n    (0, _defineProperty2.default)(this, \"getMetadata\", _download.getMetadata);\n    (0, _defineProperty2.default)(this, \"getFileContent\", _download.getFileContent);\n    (0, _defineProperty2.default)(this, \"getFileContentHns\", _download.getFileContentHns);\n    (0, _defineProperty2.default)(this, \"getFileContentRequest\", _download.getFileContentRequest);\n    (0, _defineProperty2.default)(this, \"openFile\", _download.openFile);\n    (0, _defineProperty2.default)(this, \"openFileHns\", _download.openFileHns);\n    (0, _defineProperty2.default)(this, \"resolveHns\", _download.resolveHns);\n    (0, _defineProperty2.default)(this, \"extractDomain\", _utils.extractDomain);\n    (0, _defineProperty2.default)(this, \"getFullDomainUrl\", _utils.getFullDomainUrl);\n    (0, _defineProperty2.default)(this, \"loadMySky\", _mysky.loadMySky);\n    (0, _defineProperty2.default)(this, \"file\", {\n      getJSON: _file.getJSON.bind(this)\n    });\n    (0, _defineProperty2.default)(this, \"db\", {\n      getJSON: _skydb.getJSON.bind(this),\n      setJSON: _skydb.setJSON.bind(this)\n    });\n    (0, _defineProperty2.default)(this, \"registry\", {\n      getEntry: _registry.getEntry.bind(this),\n      getEntryUrl: _registry.getEntryUrl.bind(this),\n      setEntry: _registry.setEntry.bind(this),\n      postSignedEntry: _registry.postSignedEntry.bind(this)\n    });\n\n    if (initialPortalUrl === \"\") {\n      // Portal was not given, use the default portal URL. We'll still make a request for the resolved portal URL.\n      initialPortalUrl = (0, _url.defaultPortalUrl)();\n    } else {\n      // Portal was given, don't make the request for the resolved portal URL.\n      this.givenPortalUrl = initialPortalUrl;\n    }\n\n    this.initialPortalUrl = initialPortalUrl;\n    this.customOptions = customOptions;\n  }\n  /**\n   * Make the request for the API portal URL.\n   *\n   * @returns - A promise that resolves when the request is complete.\n   */\n\n  /* istanbul ignore next */\n\n\n  async initPortalUrl() {\n    if (!SkynetClient.resolvedPortalUrl) {\n      SkynetClient.resolvedPortalUrl = new Promise((resolve, reject) => {\n        this.executeRequest({ ...this.customOptions,\n          method: \"head\",\n          url: this.initialPortalUrl,\n          endpointPath: \"/\"\n        }).then(response => {\n          if (typeof response.headers === \"undefined\") {\n            reject(new Error(\"Did not get 'headers' in response despite a successful request. Please try again and report this issue to the devs if it persists.\"));\n          }\n\n          const portalUrl = response.headers[\"skynet-portal-api\"];\n\n          if (!portalUrl) {\n            reject(new Error(\"Could not get portal URL for the given portal\"));\n          }\n\n          resolve(portalUrl);\n        });\n      });\n    }\n\n    await SkynetClient.resolvedPortalUrl;\n    return;\n  }\n  /**\n   * Returns the API portal URL. Makes the request to get it if not done so already.\n   *\n   * @returns - the portal URL.\n   */\n\n  /* istanbul ignore next */\n\n\n  async portalUrl() {\n    if (this.givenPortalUrl) {\n      return this.givenPortalUrl;\n    } // Make the request if needed and not done so.\n\n\n    this.initPortalUrl();\n    return await SkynetClient.resolvedPortalUrl; // eslint-disable-line\n  }\n  /**\n   * Creates and executes a request.\n   *\n   * @param config - Configuration for the request.\n   * @returns - The response from axios.\n   * @throws - Will throw if unimplemented options have been passed in.\n   */\n\n\n  async executeRequest(config) {\n    // Build the URL.\n    let url = config.url;\n\n    if (!url) {\n      var _config$extraPath;\n\n      const portalUrl = await this.portalUrl();\n      url = (0, _url.makeUrl)(portalUrl, config.endpointPath, (_config$extraPath = config.extraPath) !== null && _config$extraPath !== void 0 ? _config$extraPath : \"\");\n    }\n\n    if (config.query) {\n      url = (0, _url.addUrlQuery)(url, config.query);\n    } // Build headers.\n\n\n    const headers = { ...config.headers\n    };\n\n    if (config.customUserAgent) {\n      headers[\"User-Agent\"] = config.customUserAgent;\n    }\n\n    const auth = config.APIKey ? {\n      username: \"\",\n      password: config.APIKey\n    } : undefined;\n    /* istanbul ignore next */\n\n    const onUploadProgress = config.onUploadProgress && function (event) {\n      const progress = event.loaded / event.total; // Need the if-statement or TS complains.\n\n      if (config.onUploadProgress) config.onUploadProgress(progress, event);\n    };\n\n    return (0, _axios.default)({\n      url,\n      method: config.method,\n      data: config.data,\n      headers,\n      auth,\n      onUploadProgress,\n      transformRequest: config.transformRequest,\n      transformResponse: config.transformResponse,\n      maxContentLength: Infinity,\n      maxBodyLength: Infinity,\n      // Allow cross-site cookies.\n      withCredentials: true\n    });\n  }\n\n}\n\nexports.SkynetClient = SkynetClient;\n(0, _defineProperty2.default)(SkynetClient, \"resolvedPortalUrl\", void 0);","map":{"version":3,"sources":["C:/Users/Usama_Sadiq/Documents/React App/2/skapp-private/node_modules/@skynetlabs/content-record-library/node_modules/skynet-js/dist/client.js"],"names":["_interopRequireDefault","require","Object","defineProperty","exports","value","SkynetClient","_defineProperty2","_axios","_upload","_download","_file","_skydb","_registry","_url","_mysky","_utils","constructor","initialPortalUrl","customOptions","default","uploadFile","uploadFileRequest","uploadDirectory","uploadDirectoryRequest","downloadFile","downloadFileHns","getSkylinkUrl","getHnsUrl","getHnsresUrl","getMetadata","getFileContent","getFileContentHns","getFileContentRequest","openFile","openFileHns","resolveHns","extractDomain","getFullDomainUrl","loadMySky","getJSON","bind","setJSON","getEntry","getEntryUrl","setEntry","postSignedEntry","defaultPortalUrl","givenPortalUrl","initPortalUrl","resolvedPortalUrl","Promise","resolve","reject","executeRequest","method","url","endpointPath","then","response","headers","Error","portalUrl","config","_config$extraPath","makeUrl","extraPath","query","addUrlQuery","customUserAgent","auth","APIKey","username","password","undefined","onUploadProgress","event","progress","loaded","total","data","transformRequest","transformResponse","maxContentLength","Infinity","maxBodyLength","withCredentials"],"mappings":"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","sourcesContent":["\"use strict\";\n\nvar _interopRequireDefault = require(\"@babel/runtime/helpers/interopRequireDefault\");\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.SkynetClient = void 0;\n\nvar _defineProperty2 = _interopRequireDefault(require(\"@babel/runtime/helpers/defineProperty\"));\n\nvar _axios = _interopRequireDefault(require(\"axios\"));\n\nvar _upload = require(\"./upload\");\n\nvar _download = require(\"./download\");\n\nvar _file = require(\"./file\");\n\nvar _skydb = require(\"./skydb\");\n\nvar _registry = require(\"./registry\");\n\nvar _url = require(\"./utils/url\");\n\nvar _mysky = require(\"./mysky\");\n\nvar _utils = require(\"./mysky/utils\");\n\n/**\n * The Skynet Client which can be used to access Skynet.\n */\nclass SkynetClient {\n  // The initial portal URL, either given to `new SkynetClient()` or if not, the value of `defaultPortalUrl()`.\n  // The resolved API portal URL. The request won't be made until needed, or `initPortalUrl()` is called. The request is only made once, for all Skynet Clients.\n  // The given portal URL, if one was passed in to `new SkynetClient()`.\n  // Set methods (defined in other files).\n  // Upload\n  // Download\n  // MySky\n  // File API\n  // SkyDB\n  // SkyDB helpers\n\n  /**\n   * The Skynet Client which can be used to access Skynet.\n   *\n   * @class\n   * @param [initialPortalUrl] The initial portal URL to use to access Skynet, if specified. A request will be made to this URL to get the actual portal URL. To use the default portal while passing custom options, pass \"\".\n   * @param [customOptions] Configuration for the client.\n   */\n  constructor(initialPortalUrl = \"\", customOptions = {}) {\n    (0, _defineProperty2.default)(this, \"customOptions\", void 0);\n    (0, _defineProperty2.default)(this, \"initialPortalUrl\", void 0);\n    (0, _defineProperty2.default)(this, \"givenPortalUrl\", void 0);\n    (0, _defineProperty2.default)(this, \"uploadFile\", _upload.uploadFile);\n    (0, _defineProperty2.default)(this, \"uploadFileRequest\", _upload.uploadFileRequest);\n    (0, _defineProperty2.default)(this, \"uploadDirectory\", _upload.uploadDirectory);\n    (0, _defineProperty2.default)(this, \"uploadDirectoryRequest\", _upload.uploadDirectoryRequest);\n    (0, _defineProperty2.default)(this, \"downloadFile\", _download.downloadFile);\n    (0, _defineProperty2.default)(this, \"downloadFileHns\", _download.downloadFileHns);\n    (0, _defineProperty2.default)(this, \"getSkylinkUrl\", _download.getSkylinkUrl);\n    (0, _defineProperty2.default)(this, \"getHnsUrl\", _download.getHnsUrl);\n    (0, _defineProperty2.default)(this, \"getHnsresUrl\", _download.getHnsresUrl);\n    (0, _defineProperty2.default)(this, \"getMetadata\", _download.getMetadata);\n    (0, _defineProperty2.default)(this, \"getFileContent\", _download.getFileContent);\n    (0, _defineProperty2.default)(this, \"getFileContentHns\", _download.getFileContentHns);\n    (0, _defineProperty2.default)(this, \"getFileContentRequest\", _download.getFileContentRequest);\n    (0, _defineProperty2.default)(this, \"openFile\", _download.openFile);\n    (0, _defineProperty2.default)(this, \"openFileHns\", _download.openFileHns);\n    (0, _defineProperty2.default)(this, \"resolveHns\", _download.resolveHns);\n    (0, _defineProperty2.default)(this, \"extractDomain\", _utils.extractDomain);\n    (0, _defineProperty2.default)(this, \"getFullDomainUrl\", _utils.getFullDomainUrl);\n    (0, _defineProperty2.default)(this, \"loadMySky\", _mysky.loadMySky);\n    (0, _defineProperty2.default)(this, \"file\", {\n      getJSON: _file.getJSON.bind(this)\n    });\n    (0, _defineProperty2.default)(this, \"db\", {\n      getJSON: _skydb.getJSON.bind(this),\n      setJSON: _skydb.setJSON.bind(this)\n    });\n    (0, _defineProperty2.default)(this, \"registry\", {\n      getEntry: _registry.getEntry.bind(this),\n      getEntryUrl: _registry.getEntryUrl.bind(this),\n      setEntry: _registry.setEntry.bind(this),\n      postSignedEntry: _registry.postSignedEntry.bind(this)\n    });\n\n    if (initialPortalUrl === \"\") {\n      // Portal was not given, use the default portal URL. We'll still make a request for the resolved portal URL.\n      initialPortalUrl = (0, _url.defaultPortalUrl)();\n    } else {\n      // Portal was given, don't make the request for the resolved portal URL.\n      this.givenPortalUrl = initialPortalUrl;\n    }\n\n    this.initialPortalUrl = initialPortalUrl;\n    this.customOptions = customOptions;\n  }\n  /**\n   * Make the request for the API portal URL.\n   *\n   * @returns - A promise that resolves when the request is complete.\n   */\n\n  /* istanbul ignore next */\n\n\n  async initPortalUrl() {\n    if (!SkynetClient.resolvedPortalUrl) {\n      SkynetClient.resolvedPortalUrl = new Promise((resolve, reject) => {\n        this.executeRequest({ ...this.customOptions,\n          method: \"head\",\n          url: this.initialPortalUrl,\n          endpointPath: \"/\"\n        }).then(response => {\n          if (typeof response.headers === \"undefined\") {\n            reject(new Error(\"Did not get 'headers' in response despite a successful request. Please try again and report this issue to the devs if it persists.\"));\n          }\n\n          const portalUrl = response.headers[\"skynet-portal-api\"];\n\n          if (!portalUrl) {\n            reject(new Error(\"Could not get portal URL for the given portal\"));\n          }\n\n          resolve(portalUrl);\n        });\n      });\n    }\n\n    await SkynetClient.resolvedPortalUrl;\n    return;\n  }\n  /**\n   * Returns the API portal URL. Makes the request to get it if not done so already.\n   *\n   * @returns - the portal URL.\n   */\n\n  /* istanbul ignore next */\n\n\n  async portalUrl() {\n    if (this.givenPortalUrl) {\n      return this.givenPortalUrl;\n    } // Make the request if needed and not done so.\n\n\n    this.initPortalUrl();\n    return await SkynetClient.resolvedPortalUrl; // eslint-disable-line\n  }\n  /**\n   * Creates and executes a request.\n   *\n   * @param config - Configuration for the request.\n   * @returns - The response from axios.\n   * @throws - Will throw if unimplemented options have been passed in.\n   */\n\n\n  async executeRequest(config) {\n    // Build the URL.\n    let url = config.url;\n\n    if (!url) {\n      var _config$extraPath;\n\n      const portalUrl = await this.portalUrl();\n      url = (0, _url.makeUrl)(portalUrl, config.endpointPath, (_config$extraPath = config.extraPath) !== null && _config$extraPath !== void 0 ? _config$extraPath : \"\");\n    }\n\n    if (config.query) {\n      url = (0, _url.addUrlQuery)(url, config.query);\n    } // Build headers.\n\n\n    const headers = { ...config.headers\n    };\n\n    if (config.customUserAgent) {\n      headers[\"User-Agent\"] = config.customUserAgent;\n    }\n\n    const auth = config.APIKey ? {\n      username: \"\",\n      password: config.APIKey\n    } : undefined;\n    /* istanbul ignore next */\n\n    const onUploadProgress = config.onUploadProgress && function (event) {\n      const progress = event.loaded / event.total; // Need the if-statement or TS complains.\n\n      if (config.onUploadProgress) config.onUploadProgress(progress, event);\n    };\n\n    return (0, _axios.default)({\n      url,\n      method: config.method,\n      data: config.data,\n      headers,\n      auth,\n      onUploadProgress,\n      transformRequest: config.transformRequest,\n      transformResponse: config.transformResponse,\n      maxContentLength: Infinity,\n      maxBodyLength: Infinity,\n      // Allow cross-site cookies.\n      withCredentials: true\n    });\n  }\n\n}\n\nexports.SkynetClient = SkynetClient;\n(0, _defineProperty2.default)(SkynetClient, \"resolvedPortalUrl\", void 0);"]},"metadata":{},"sourceType":"script"}