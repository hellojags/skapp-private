{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getEntry = getEntry;\nexports.getEntryUrl = getEntryUrl;\nexports.setEntry = setEntry;\nexports.signEntry = signEntry;\nexports.postSignedEntry = postSignedEntry;\nexports.validateRegistryEntry = validateRegistryEntry;\nexports.regexRevisionNoQuotes = exports.DEFAULT_GET_ENTRY_TIMEOUT = exports.defaultSetEntryOptions = exports.defaultGetEntryOptions = void 0;\n\nvar _buffer = require(\"buffer\");\n\nvar _tweetnacl = require(\"tweetnacl\");\n\nvar _number = require(\"./utils/number\");\n\nvar _options = require(\"./utils/options\");\n\nvar _string = require(\"./utils/string\");\n\nvar _url = require(\"./utils/url\");\n\nvar _crypto = require(\"./crypto\");\n\nvar _validation = require(\"./utils/validation\");\n\nconst defaultGetEntryOptions = { ..._options.defaultBaseOptions,\n  endpointGetEntry: \"/skynet/registry\",\n  hashedDataKeyHex: false\n};\nexports.defaultGetEntryOptions = defaultGetEntryOptions;\nconst defaultSetEntryOptions = { ..._options.defaultBaseOptions,\n  endpointSetEntry: \"/skynet/registry\",\n  hashedDataKeyHex: false\n};\nexports.defaultSetEntryOptions = defaultSetEntryOptions;\nconst DEFAULT_GET_ENTRY_TIMEOUT = 5; // 5 seconds\n\n/**\n * Regex for JSON revision value without quotes.\n */\n\nexports.DEFAULT_GET_ENTRY_TIMEOUT = DEFAULT_GET_ENTRY_TIMEOUT;\nconst regexRevisionNoQuotes = /\"revision\":\\s*([0-9]+)/;\n/**\n * Regex for JSON revision value with quotes.\n */\n\nexports.regexRevisionNoQuotes = regexRevisionNoQuotes;\nconst regexRevisionWithQuotes = /\"revision\":\\s*\"([0-9]+)\"/;\n/**\n * Registry entry.\n *\n * @property dataKey - The key of the data for the given entry.\n * @property data - The data stored in the entry.\n * @property revision - The revision number for the entry.\n */\n\n/**\n * Gets the registry entry corresponding to the publicKey and dataKey.\n *\n * @param this - SkynetClient\n * @param publicKey - The user public key.\n * @param dataKey - The key of the data to fetch for the given user.\n * @param [customOptions] - Additional settings that can optionally be set.\n * @returns - The signed registry entry.\n * @throws - Will throw if the returned signature does not match the returned entry or the provided timeout is invalid or the given key is not valid.\n */\n\nasync function getEntry(publicKey, dataKey, customOptions) {\n  // Validation is done in `getEntryUrl`.\n  const opts = { ...defaultGetEntryOptions,\n    ...this.customOptions,\n    ...customOptions\n  };\n  const url = await this.registry.getEntryUrl(publicKey, dataKey, opts);\n  let response;\n\n  try {\n    response = await this.executeRequest({ ...opts,\n      endpointPath: opts.endpointGetEntry,\n      url,\n      method: \"get\",\n      // Transform the response to add quotes, since uint64 cannot be accurately\n      // read by JS so the revision needs to be parsed as a string.\n      transformResponse: function (data) {\n        if (data === undefined) {\n          return {};\n        } // Change the revision value from a JSON integer to a string.\n\n\n        data = data.replace(regexRevisionNoQuotes, '\"revision\":\"$1\"'); // Convert the JSON data to an object.\n\n        return JSON.parse(data);\n      }\n    });\n  } catch (err) {\n    // TODO: Refactor this validation into a separate function.\n\n    /* istanbul ignore next */\n    if (!err.response) {\n      console.log(\"Full error: \".concat(err));\n      throw new Error(\"Error response not found\");\n    }\n    /* istanbul ignore next */\n\n\n    if (!err.response.status) {\n      console.log(\"Full error: \".concat(err));\n      throw new Error(\"Error response did not contain expected field 'status'\");\n    } // Check if status was 404 \"not found\" and return null if so.\n\n\n    if (err.response.status === 404) {\n      return {\n        entry: null,\n        signature: null\n      };\n    }\n    /* istanbul ignore next */\n\n\n    if (!err.response.data) {\n      console.log(\"Full error: \".concat(err));\n      throw new Error(\"Error response did not contain expected field 'data'. Status code: \".concat(err.response.status));\n    }\n    /* istanbul ignore next */\n\n\n    if (!err.response.data.message) {\n      console.log(\"Full error: \".concat(err));\n      throw new Error(\"Error response did not contained expected fields 'data.message'. Status code: \".concat(err.response.status));\n    } // Return the error message from the response.\n\n\n    throw new Error(err.response.data.message);\n  } // Sanity check.\n\n\n  try {\n    (0, _validation.validateString)(\"response.data.data\", response.data.data, \"entry response field\");\n    (0, _validation.validateString)(\"response.data.revision\", response.data.revision, \"entry response field\");\n    (0, _validation.validateString)(\"response.data.signature\", response.data.signature, \"entry response field\");\n  } catch (err) {\n    throw new Error(\"Did not get a complete entry response despite a successful request. Please try again and report this issue to the devs if it persists. Error: \".concat(err));\n  } // Use empty string if the data is empty.\n\n\n  let data = \"\";\n\n  if (response.data.data) {\n    data = (0, _string.uint8ArrayToStringUtf8)((0, _string.hexToUint8Array)(response.data.data));\n  }\n\n  const signedEntry = {\n    entry: {\n      dataKey,\n      data,\n      // Convert the revision from a string to bigint.\n      revision: BigInt(response.data.revision)\n    },\n    signature: _buffer.Buffer.from((0, _string.hexToUint8Array)(response.data.signature))\n  };\n\n  if (signedEntry && !_tweetnacl.sign.detached.verify((0, _crypto.hashRegistryEntry)(signedEntry.entry, opts.hashedDataKeyHex), new Uint8Array(signedEntry.signature), (0, _string.hexToUint8Array)(publicKey))) {\n    throw new Error(\"could not verify signature from retrieved, signed registry entry -- possible corrupted entry\");\n  }\n\n  return signedEntry;\n}\n/**\n * Gets the registry entry URL corresponding to the publicKey and dataKey.\n *\n * @param this - SkynetClient\n * @param publicKey - The user public key.\n * @param dataKey - The key of the data to fetch for the given user.\n * @param [customOptions] - Additional settings that can optionally be set.\n * @returns - The full get entry URL.\n * @throws - Will throw if the provided timeout is invalid or the given key is not valid.\n */\n\n\nasync function getEntryUrl(publicKey, dataKey, customOptions) {\n  // Validation is done in `getEntryUrlForPortal`.\n  const opts = { ...defaultGetEntryOptions,\n    ...this.customOptions,\n    ...customOptions\n  };\n  const portalUrl = await this.portalUrl();\n  return (0, _url.getEntryUrlForPortal)(portalUrl, publicKey, dataKey, opts);\n}\n/**\n * Sets the registry entry.\n *\n * @param this - SkynetClient\n * @param privateKey - The user private key.\n * @param entry - The entry to set.\n * @param [customOptions] - Additional settings that can optionally be set.\n * @throws - Will throw if the entry revision does not fit in 64 bits or the given key is not valid.\n */\n\n\nasync function setEntry(privateKey, entry, customOptions) {\n  (0, _validation.validateHexString)(\"privateKey\", privateKey, \"parameter\");\n  validateRegistryEntry(\"entry\", entry, \"parameter\");\n  (0, _validation.validateOptionalObject)(\"customOptions\", customOptions, \"parameter\", defaultSetEntryOptions); // Assert the input is 64 bits.\n\n  (0, _number.assertUint64)(entry.revision);\n  const opts = { ...defaultSetEntryOptions,\n    ...this.customOptions,\n    ...customOptions\n  };\n  const privateKeyArray = (0, _string.hexToUint8Array)(privateKey);\n  const signature = await signEntry(privateKey, entry, opts.hashedDataKeyHex);\n\n  const {\n    publicKey: publicKeyArray\n  } = _tweetnacl.sign.keyPair.fromSecretKey(privateKeyArray);\n\n  return await this.registry.postSignedEntry((0, _string.toHexString)(publicKeyArray), entry, signature, opts);\n}\n\nasync function signEntry(privateKey, entry, hashedDataKeyHex) {\n  // TODO: Publicly available, validate input.\n  const privateKeyArray = (0, _string.hexToUint8Array)(privateKey); // Sign the entry.\n  // TODO: signature type should be Signature?\n\n  return (0, _tweetnacl.sign)((0, _crypto.hashRegistryEntry)(entry, hashedDataKeyHex), privateKeyArray);\n}\n\nasync function postSignedEntry(publicKey, entry, signature, customOptions) {\n  (0, _validation.validateHexString)(\"publicKey\", publicKey, \"parameter\"); // TODO: Validate entry and signature\n\n  (0, _validation.validateString)(\"entry.dataKey\", entry.dataKey, \"parameter\");\n  (0, _validation.validateOptionalObject)(\"customOptions\", customOptions, \"parameter\", defaultSetEntryOptions);\n  const opts = { ...defaultSetEntryOptions,\n    ...this.customOptions,\n    ...customOptions\n  }; // Hash and hex encode the given data key if it is not a hash already.\n\n  let datakey = entry.dataKey;\n\n  if (!opts.hashedDataKeyHex) {\n    datakey = (0, _string.toHexString)((0, _crypto.hashDataKey)(entry.dataKey));\n  }\n\n  const data = {\n    publickey: {\n      algorithm: \"ed25519\",\n      key: Array.from((0, _string.hexToUint8Array)(publicKey))\n    },\n    datakey,\n    // Set the revision as a string here since the value may be up to 64 bits.\n    // We remove the quotes later in transformRequest.\n    revision: entry.revision.toString(),\n    data: Array.from(_buffer.Buffer.from(entry.data)),\n    signature: Array.from(signature)\n  };\n  await this.executeRequest({ ...opts,\n    endpointPath: opts.endpointSetEntry,\n    method: \"post\",\n    data,\n    // Transform the request to remove quotes, since the revision needs to be\n    // parsed as a uint64 on the Go side.\n    transformRequest: function (data) {\n      // Convert the object data to JSON.\n      const json = JSON.stringify(data); // Change the revision value from a string to a JSON integer.\n\n      return json.replace(regexRevisionWithQuotes, '\"revision\":$1');\n    }\n  });\n}\n\nfunction validateRegistryEntry(name, value, valueKind) {\n  (0, _validation.validateObject)(name, value, valueKind);\n  (0, _validation.validateString)(\"\".concat(name, \".dataKey\"), value.dataKey, \"\".concat(valueKind, \" field\"));\n  (0, _validation.validateString)(\"\".concat(name, \".data\"), value.data, \"\".concat(valueKind, \" field\"));\n  (0, _validation.validateBigint)(\"\".concat(name, \".revision\"), value.revision, \"\".concat(valueKind, \" field\"));\n}","map":{"version":3,"sources":["C:/Users/Usama_Sadiq/Documents/React App/2/skapp-private/node_modules/@skynetlabs/content-record-library/node_modules/skynet-js/dist/registry.js"],"names":["Object","defineProperty","exports","value","getEntry","getEntryUrl","setEntry","signEntry","postSignedEntry","validateRegistryEntry","regexRevisionNoQuotes","DEFAULT_GET_ENTRY_TIMEOUT","defaultSetEntryOptions","defaultGetEntryOptions","_buffer","require","_tweetnacl","_number","_options","_string","_url","_crypto","_validation","defaultBaseOptions","endpointGetEntry","hashedDataKeyHex","endpointSetEntry","regexRevisionWithQuotes","publicKey","dataKey","customOptions","opts","url","registry","response","executeRequest","endpointPath","method","transformResponse","data","undefined","replace","JSON","parse","err","console","log","concat","Error","status","entry","signature","message","validateString","revision","uint8ArrayToStringUtf8","hexToUint8Array","signedEntry","BigInt","Buffer","from","sign","detached","verify","hashRegistryEntry","Uint8Array","portalUrl","getEntryUrlForPortal","privateKey","validateHexString","validateOptionalObject","assertUint64","privateKeyArray","publicKeyArray","keyPair","fromSecretKey","toHexString","datakey","hashDataKey","publickey","algorithm","key","Array","toString","transformRequest","json","stringify","name","valueKind","validateObject","validateBigint"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.getEntry = getEntry;\nexports.getEntryUrl = getEntryUrl;\nexports.setEntry = setEntry;\nexports.signEntry = signEntry;\nexports.postSignedEntry = postSignedEntry;\nexports.validateRegistryEntry = validateRegistryEntry;\nexports.regexRevisionNoQuotes = exports.DEFAULT_GET_ENTRY_TIMEOUT = exports.defaultSetEntryOptions = exports.defaultGetEntryOptions = void 0;\n\nvar _buffer = require(\"buffer\");\n\nvar _tweetnacl = require(\"tweetnacl\");\n\nvar _number = require(\"./utils/number\");\n\nvar _options = require(\"./utils/options\");\n\nvar _string = require(\"./utils/string\");\n\nvar _url = require(\"./utils/url\");\n\nvar _crypto = require(\"./crypto\");\n\nvar _validation = require(\"./utils/validation\");\n\nconst defaultGetEntryOptions = { ..._options.defaultBaseOptions,\n  endpointGetEntry: \"/skynet/registry\",\n  hashedDataKeyHex: false\n};\nexports.defaultGetEntryOptions = defaultGetEntryOptions;\nconst defaultSetEntryOptions = { ..._options.defaultBaseOptions,\n  endpointSetEntry: \"/skynet/registry\",\n  hashedDataKeyHex: false\n};\nexports.defaultSetEntryOptions = defaultSetEntryOptions;\nconst DEFAULT_GET_ENTRY_TIMEOUT = 5; // 5 seconds\n\n/**\n * Regex for JSON revision value without quotes.\n */\n\nexports.DEFAULT_GET_ENTRY_TIMEOUT = DEFAULT_GET_ENTRY_TIMEOUT;\nconst regexRevisionNoQuotes = /\"revision\":\\s*([0-9]+)/;\n/**\n * Regex for JSON revision value with quotes.\n */\n\nexports.regexRevisionNoQuotes = regexRevisionNoQuotes;\nconst regexRevisionWithQuotes = /\"revision\":\\s*\"([0-9]+)\"/;\n/**\n * Registry entry.\n *\n * @property dataKey - The key of the data for the given entry.\n * @property data - The data stored in the entry.\n * @property revision - The revision number for the entry.\n */\n\n/**\n * Gets the registry entry corresponding to the publicKey and dataKey.\n *\n * @param this - SkynetClient\n * @param publicKey - The user public key.\n * @param dataKey - The key of the data to fetch for the given user.\n * @param [customOptions] - Additional settings that can optionally be set.\n * @returns - The signed registry entry.\n * @throws - Will throw if the returned signature does not match the returned entry or the provided timeout is invalid or the given key is not valid.\n */\nasync function getEntry(publicKey, dataKey, customOptions) {\n  // Validation is done in `getEntryUrl`.\n  const opts = { ...defaultGetEntryOptions,\n    ...this.customOptions,\n    ...customOptions\n  };\n  const url = await this.registry.getEntryUrl(publicKey, dataKey, opts);\n  let response;\n\n  try {\n    response = await this.executeRequest({ ...opts,\n      endpointPath: opts.endpointGetEntry,\n      url,\n      method: \"get\",\n      // Transform the response to add quotes, since uint64 cannot be accurately\n      // read by JS so the revision needs to be parsed as a string.\n      transformResponse: function (data) {\n        if (data === undefined) {\n          return {};\n        } // Change the revision value from a JSON integer to a string.\n\n\n        data = data.replace(regexRevisionNoQuotes, '\"revision\":\"$1\"'); // Convert the JSON data to an object.\n\n        return JSON.parse(data);\n      }\n    });\n  } catch (err) {\n    // TODO: Refactor this validation into a separate function.\n\n    /* istanbul ignore next */\n    if (!err.response) {\n      console.log(\"Full error: \".concat(err));\n      throw new Error(\"Error response not found\");\n    }\n    /* istanbul ignore next */\n\n\n    if (!err.response.status) {\n      console.log(\"Full error: \".concat(err));\n      throw new Error(\"Error response did not contain expected field 'status'\");\n    } // Check if status was 404 \"not found\" and return null if so.\n\n\n    if (err.response.status === 404) {\n      return {\n        entry: null,\n        signature: null\n      };\n    }\n    /* istanbul ignore next */\n\n\n    if (!err.response.data) {\n      console.log(\"Full error: \".concat(err));\n      throw new Error(\"Error response did not contain expected field 'data'. Status code: \".concat(err.response.status));\n    }\n    /* istanbul ignore next */\n\n\n    if (!err.response.data.message) {\n      console.log(\"Full error: \".concat(err));\n      throw new Error(\"Error response did not contained expected fields 'data.message'. Status code: \".concat(err.response.status));\n    } // Return the error message from the response.\n\n\n    throw new Error(err.response.data.message);\n  } // Sanity check.\n\n\n  try {\n    (0, _validation.validateString)(\"response.data.data\", response.data.data, \"entry response field\");\n    (0, _validation.validateString)(\"response.data.revision\", response.data.revision, \"entry response field\");\n    (0, _validation.validateString)(\"response.data.signature\", response.data.signature, \"entry response field\");\n  } catch (err) {\n    throw new Error(\"Did not get a complete entry response despite a successful request. Please try again and report this issue to the devs if it persists. Error: \".concat(err));\n  } // Use empty string if the data is empty.\n\n\n  let data = \"\";\n\n  if (response.data.data) {\n    data = (0, _string.uint8ArrayToStringUtf8)((0, _string.hexToUint8Array)(response.data.data));\n  }\n\n  const signedEntry = {\n    entry: {\n      dataKey,\n      data,\n      // Convert the revision from a string to bigint.\n      revision: BigInt(response.data.revision)\n    },\n    signature: _buffer.Buffer.from((0, _string.hexToUint8Array)(response.data.signature))\n  };\n\n  if (signedEntry && !_tweetnacl.sign.detached.verify((0, _crypto.hashRegistryEntry)(signedEntry.entry, opts.hashedDataKeyHex), new Uint8Array(signedEntry.signature), (0, _string.hexToUint8Array)(publicKey))) {\n    throw new Error(\"could not verify signature from retrieved, signed registry entry -- possible corrupted entry\");\n  }\n\n  return signedEntry;\n}\n/**\n * Gets the registry entry URL corresponding to the publicKey and dataKey.\n *\n * @param this - SkynetClient\n * @param publicKey - The user public key.\n * @param dataKey - The key of the data to fetch for the given user.\n * @param [customOptions] - Additional settings that can optionally be set.\n * @returns - The full get entry URL.\n * @throws - Will throw if the provided timeout is invalid or the given key is not valid.\n */\n\n\nasync function getEntryUrl(publicKey, dataKey, customOptions) {\n  // Validation is done in `getEntryUrlForPortal`.\n  const opts = { ...defaultGetEntryOptions,\n    ...this.customOptions,\n    ...customOptions\n  };\n  const portalUrl = await this.portalUrl();\n  return (0, _url.getEntryUrlForPortal)(portalUrl, publicKey, dataKey, opts);\n}\n/**\n * Sets the registry entry.\n *\n * @param this - SkynetClient\n * @param privateKey - The user private key.\n * @param entry - The entry to set.\n * @param [customOptions] - Additional settings that can optionally be set.\n * @throws - Will throw if the entry revision does not fit in 64 bits or the given key is not valid.\n */\n\n\nasync function setEntry(privateKey, entry, customOptions) {\n  (0, _validation.validateHexString)(\"privateKey\", privateKey, \"parameter\");\n  validateRegistryEntry(\"entry\", entry, \"parameter\");\n  (0, _validation.validateOptionalObject)(\"customOptions\", customOptions, \"parameter\", defaultSetEntryOptions); // Assert the input is 64 bits.\n\n  (0, _number.assertUint64)(entry.revision);\n  const opts = { ...defaultSetEntryOptions,\n    ...this.customOptions,\n    ...customOptions\n  };\n  const privateKeyArray = (0, _string.hexToUint8Array)(privateKey);\n  const signature = await signEntry(privateKey, entry, opts.hashedDataKeyHex);\n\n  const {\n    publicKey: publicKeyArray\n  } = _tweetnacl.sign.keyPair.fromSecretKey(privateKeyArray);\n\n  return await this.registry.postSignedEntry((0, _string.toHexString)(publicKeyArray), entry, signature, opts);\n}\n\nasync function signEntry(privateKey, entry, hashedDataKeyHex) {\n  // TODO: Publicly available, validate input.\n  const privateKeyArray = (0, _string.hexToUint8Array)(privateKey); // Sign the entry.\n  // TODO: signature type should be Signature?\n\n  return (0, _tweetnacl.sign)((0, _crypto.hashRegistryEntry)(entry, hashedDataKeyHex), privateKeyArray);\n}\n\nasync function postSignedEntry(publicKey, entry, signature, customOptions) {\n  (0, _validation.validateHexString)(\"publicKey\", publicKey, \"parameter\"); // TODO: Validate entry and signature\n\n  (0, _validation.validateString)(\"entry.dataKey\", entry.dataKey, \"parameter\");\n  (0, _validation.validateOptionalObject)(\"customOptions\", customOptions, \"parameter\", defaultSetEntryOptions);\n  const opts = { ...defaultSetEntryOptions,\n    ...this.customOptions,\n    ...customOptions\n  }; // Hash and hex encode the given data key if it is not a hash already.\n\n  let datakey = entry.dataKey;\n\n  if (!opts.hashedDataKeyHex) {\n    datakey = (0, _string.toHexString)((0, _crypto.hashDataKey)(entry.dataKey));\n  }\n\n  const data = {\n    publickey: {\n      algorithm: \"ed25519\",\n      key: Array.from((0, _string.hexToUint8Array)(publicKey))\n    },\n    datakey,\n    // Set the revision as a string here since the value may be up to 64 bits.\n    // We remove the quotes later in transformRequest.\n    revision: entry.revision.toString(),\n    data: Array.from(_buffer.Buffer.from(entry.data)),\n    signature: Array.from(signature)\n  };\n  await this.executeRequest({ ...opts,\n    endpointPath: opts.endpointSetEntry,\n    method: \"post\",\n    data,\n    // Transform the request to remove quotes, since the revision needs to be\n    // parsed as a uint64 on the Go side.\n    transformRequest: function (data) {\n      // Convert the object data to JSON.\n      const json = JSON.stringify(data); // Change the revision value from a string to a JSON integer.\n\n      return json.replace(regexRevisionWithQuotes, '\"revision\":$1');\n    }\n  });\n}\n\nfunction validateRegistryEntry(name, value, valueKind) {\n  (0, _validation.validateObject)(name, value, valueKind);\n  (0, _validation.validateString)(\"\".concat(name, \".dataKey\"), value.dataKey, \"\".concat(valueKind, \" field\"));\n  (0, _validation.validateString)(\"\".concat(name, \".data\"), value.data, \"\".concat(valueKind, \" field\"));\n  (0, _validation.validateBigint)(\"\".concat(name, \".revision\"), value.revision, \"\".concat(valueKind, \" field\"));\n}"]},"metadata":{},"sourceType":"script"}