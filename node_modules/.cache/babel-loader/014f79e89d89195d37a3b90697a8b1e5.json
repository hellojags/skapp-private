{"ast":null,"code":"import { ofType } from \"redux-observable\";\nimport { switchMap, map } from \"rxjs/operators\";\nimport { from } from \"rxjs\";\nimport { setLoaderDisplay } from \"./SnLoaderAction\";\nimport { EPIC_TY_PUBLISH_APP, EPIC_TY_GET_MY_PUBLISHED_APPS } from \"../SnActionConstants\";\nimport { publishApp, getMyPublishedApps } from \"../../service/SnSkappService\";\nimport { setPublishedAppsStore } from \"./SnPublishAppAction\"; // app stats actions\n\nimport store from \"../../redux\";\nexport const snSetPublishAppEpic = action$ => action$.pipe(ofType(EPIC_TY_PUBLISH_APP), // do we need to change this to mergemap ? we dont want subscription to be overwritten\nswitchMap(action => {\n  console.log(\"snPublishAppEpic \", action);\n  store.dispatch(setLoaderDisplay(true));\n  return from(publishApp(action.payload)) // must return all published app\n  .pipe(map(res => {\n    //const apps = await getAllPublishedApps();\n    store.dispatch(setLoaderDisplay(false)); //action.payload.manageSubmitLoader(false)\n    // Update Redux Store\n\n    return setPublishedAppsStore(res);\n  }));\n}));\nexport const snGetPublishedAppsEpic = action$ => action$.pipe(ofType(EPIC_TY_GET_MY_PUBLISHED_APPS), // do we need to change this to mergemap ? we dont want subscription to be overwritten\nswitchMap(action => {\n  store.dispatch(setLoaderDisplay(true));\n  return from(getMyPublishedApps()).pipe(map(res => {\n    store.dispatch(setLoaderDisplay(false)); // Update Redux Store\n\n    return setPublishedAppsStore(res);\n  }));\n}));","map":{"version":3,"sources":["C:/Users/Usama_Sadiq/Documents/React App/2/skapp-private/src/redux/action-reducers-epic/SnPublishAppEpic.js"],"names":["ofType","switchMap","map","from","setLoaderDisplay","EPIC_TY_PUBLISH_APP","EPIC_TY_GET_MY_PUBLISHED_APPS","publishApp","getMyPublishedApps","setPublishedAppsStore","store","snSetPublishAppEpic","action$","pipe","action","console","log","dispatch","payload","res","snGetPublishedAppsEpic"],"mappings":"AAAA,SAASA,MAAT,QAAuB,kBAAvB;AACA,SAASC,SAAT,EAAoBC,GAApB,QAA+B,gBAA/B;AACA,SAASC,IAAT,QAAqB,MAArB;AACA,SAASC,gBAAT,QAAiC,kBAAjC;AACA,SACIC,mBADJ,EACyBC,6BADzB,QAGO,sBAHP;AAIA,SAASC,UAAT,EAAqBC,kBAArB,QAA+C,8BAA/C;AACA,SAASC,qBAAT,QAAsC,sBAAtC,C,CACA;;AACA,OAAOC,KAAP,MAAkB,aAAlB;AACA,OAAO,MAAMC,mBAAmB,GAAIC,OAAD,IAC/BA,OAAO,CACHC,IADJ,CACSb,MAAM,CAACK,mBAAD,CADf,EAEQ;AACAJ,SAAS,CAAEa,MAAD,IAAY;AAClBC,EAAAA,OAAO,CAACC,GAAR,CAAY,mBAAZ,EAAiCF,MAAjC;AACAJ,EAAAA,KAAK,CAACO,QAAN,CAAeb,gBAAgB,CAAC,IAAD,CAA/B;AACA,SAAOD,IAAI,CAACI,UAAU,CAACO,MAAM,CAACI,OAAR,CAAX,CAAJ,CAAiC;AAAjC,GACFL,IADE,CAECX,GAAG,CAAEiB,GAAD,IAAS;AACT;AACAT,IAAAA,KAAK,CAACO,QAAN,CAAeb,gBAAgB,CAAC,KAAD,CAA/B,EAFS,CAGT;AACA;;AACA,WAAOK,qBAAqB,CAACU,GAAD,CAA5B;AACH,GANE,CAFJ,CAAP;AAUH,CAbQ,CAHjB,CADG;AAkBP,OAAO,MAAMC,sBAAsB,GAAIR,OAAD,IAClCA,OAAO,CACHC,IADJ,CACSb,MAAM,CAACM,6BAAD,CADf,EAEQ;AACAL,SAAS,CAAEa,MAAD,IAAY;AAClBJ,EAAAA,KAAK,CAACO,QAAN,CAAeb,gBAAgB,CAAC,IAAD,CAA/B;AACA,SAAOD,IAAI,CAACK,kBAAkB,EAAnB,CAAJ,CACFK,IADE,CAECX,GAAG,CAAEiB,GAAD,IAAS;AACTT,IAAAA,KAAK,CAACO,QAAN,CAAeb,gBAAgB,CAAC,KAAD,CAA/B,EADS,CAET;;AACA,WAAOK,qBAAqB,CAACU,GAAD,CAA5B;AACH,GAJE,CAFJ,CAAP;AAQH,CAVQ,CAHjB,CADG","sourcesContent":["import { ofType } from \"redux-observable\"\r\nimport { switchMap, map } from \"rxjs/operators\"\r\nimport { from } from \"rxjs\"\r\nimport { setLoaderDisplay } from \"./SnLoaderAction\"\r\nimport {\r\n    EPIC_TY_PUBLISH_APP, EPIC_TY_GET_MY_PUBLISHED_APPS,\r\n    \r\n} from \"../SnActionConstants\";\r\nimport { publishApp, getMyPublishedApps } from \"../../service/SnSkappService\"\r\nimport { setPublishedAppsStore } from \"./SnPublishAppAction\"\r\n// app stats actions\r\nimport store from \"../../redux\"\r\nexport const snSetPublishAppEpic = (action$) =>\r\n    action$.\r\n        pipe(ofType(EPIC_TY_PUBLISH_APP),\r\n            // do we need to change this to mergemap ? we dont want subscription to be overwritten\r\n            switchMap((action) => {\r\n                console.log(\"snPublishAppEpic \", action)\r\n                store.dispatch(setLoaderDisplay(true))\r\n                return from(publishApp(action.payload)) // must return all published app\r\n                    .pipe(\r\n                        map((res) => {\r\n                            //const apps = await getAllPublishedApps();\r\n                            store.dispatch(setLoaderDisplay(false))\r\n                            //action.payload.manageSubmitLoader(false)\r\n                            // Update Redux Store\r\n                            return setPublishedAppsStore(res)\r\n                        })\r\n                    )\r\n            }));\r\nexport const snGetPublishedAppsEpic = (action$) =>\r\n    action$.\r\n        pipe(ofType(EPIC_TY_GET_MY_PUBLISHED_APPS),\r\n            // do we need to change this to mergemap ? we dont want subscription to be overwritten\r\n            switchMap((action) => {\r\n                store.dispatch(setLoaderDisplay(true))\r\n                return from(getMyPublishedApps())\r\n                    .pipe(\r\n                        map((res) => {\r\n                            store.dispatch(setLoaderDisplay(false))\r\n                            // Update Redux Store\r\n                            return setPublishedAppsStore(res)\r\n                        })\r\n                    )\r\n            }));\r\n\r\n"]},"metadata":{},"sourceType":"module"}