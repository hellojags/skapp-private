{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.assertUint64 = assertUint64;\nexports.MAX_REVISION = void 0;\n\nvar _validation = require(\"./validation\");\n/**\n * The maximum allowed value for an entry revision. Setting an entry revision to this value prevents it from being updated further.\n */\n\n\nconst MAX_REVISION = BigInt(\"18446744073709551615\"); // max uint64\n\n/**\n * Checks if the provided bigint can fit in a 64-bit unsigned integer.\n *\n * @param int - The provided integer.\n * @throws - Will throw if the int does not fit in 64 bits.\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/asUintN | MDN Demo}\n */\n\nexports.MAX_REVISION = MAX_REVISION;\n\nfunction assertUint64(int) {\n  (0, _validation.validateBigint)(\"int\", int, \"parameter\");\n\n  if (int < BigInt(0)) {\n    throw new Error(\"Argument \".concat(int, \" must be an unsigned 64-bit integer; was negative\"));\n  }\n\n  if (int > MAX_REVISION) {\n    throw new Error(\"Argument \".concat(int, \" does not fit in a 64-bit unsigned integer; exceeds 2^64-1\"));\n  }\n}","map":{"version":3,"sources":["C:/Users/Usama_Sadiq/Documents/React App/2/skapp-private/node_modules/@skynethub/userprofile-library/node_modules/skynet-js/dist/utils/number.js"],"names":["Object","defineProperty","exports","value","assertUint64","MAX_REVISION","_validation","require","BigInt","int","validateBigint","Error","concat"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,YAAR,GAAuBA,YAAvB;AACAF,OAAO,CAACG,YAAR,GAAuB,KAAK,CAA5B;;AAEA,IAAIC,WAAW,GAAGC,OAAO,CAAC,cAAD,CAAzB;AAEA;AACA;AACA;;;AACA,MAAMF,YAAY,GAAGG,MAAM,CAAC,sBAAD,CAA3B,C,CAAqD;;AAErD;AACA;AACA;AACA;AACA;AACA;AACA;;AAEAN,OAAO,CAACG,YAAR,GAAuBA,YAAvB;;AAEA,SAASD,YAAT,CAAsBK,GAAtB,EAA2B;AACzB,GAAC,GAAGH,WAAW,CAACI,cAAhB,EAAgC,KAAhC,EAAuCD,GAAvC,EAA4C,WAA5C;;AAEA,MAAIA,GAAG,GAAGD,MAAM,CAAC,CAAD,CAAhB,EAAqB;AACnB,UAAM,IAAIG,KAAJ,CAAU,YAAYC,MAAZ,CAAmBH,GAAnB,EAAwB,mDAAxB,CAAV,CAAN;AACD;;AAED,MAAIA,GAAG,GAAGJ,YAAV,EAAwB;AACtB,UAAM,IAAIM,KAAJ,CAAU,YAAYC,MAAZ,CAAmBH,GAAnB,EAAwB,4DAAxB,CAAV,CAAN;AACD;AACF","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.assertUint64 = assertUint64;\nexports.MAX_REVISION = void 0;\n\nvar _validation = require(\"./validation\");\n\n/**\n * The maximum allowed value for an entry revision. Setting an entry revision to this value prevents it from being updated further.\n */\nconst MAX_REVISION = BigInt(\"18446744073709551615\"); // max uint64\n\n/**\n * Checks if the provided bigint can fit in a 64-bit unsigned integer.\n *\n * @param int - The provided integer.\n * @throws - Will throw if the int does not fit in 64 bits.\n * @see {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/BigInt/asUintN | MDN Demo}\n */\n\nexports.MAX_REVISION = MAX_REVISION;\n\nfunction assertUint64(int) {\n  (0, _validation.validateBigint)(\"int\", int, \"parameter\");\n\n  if (int < BigInt(0)) {\n    throw new Error(\"Argument \".concat(int, \" must be an unsigned 64-bit integer; was negative\"));\n  }\n\n  if (int > MAX_REVISION) {\n    throw new Error(\"Argument \".concat(int, \" does not fit in a 64-bit unsigned integer; exceeds 2^64-1\"));\n  }\n}"]},"metadata":{},"sourceType":"script"}