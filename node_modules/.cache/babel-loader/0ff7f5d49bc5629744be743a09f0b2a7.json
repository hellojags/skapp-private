{"ast":null,"code":"\"use strict\";\n\nexports.__esModule = true;\nexports.monitorWindowError = exports.dispatchedErrorEvent = exports.errorWindowClosed = void 0;\n\nvar storage_listener_1 = require(\"./storage_listener\");\n\nexports.errorWindowClosed = \"window-closed\";\nexports.dispatchedErrorEvent = \"catchError\";\n/**\n * Checks if there has been an error from the window on an interval.\n */\n\nfunction monitorWindowError() {\n  var controller = new storage_listener_1.PromiseController();\n  var abortController = new AbortController();\n  var promise = new Promise(function (resolve, reject) {\n    var handleEvent = function (e) {\n      window.removeEventListener(exports.dispatchedErrorEvent, handleEvent);\n      var err = e.detail;\n      reject(err);\n    }; // @ts-expect-error doesn't recognize signal option.\n\n\n    window.addEventListener(exports.dispatchedErrorEvent, handleEvent, {\n      signal: abortController.signal\n    }); // Initialize cleanup function.\n\n    controller.cleanup = function () {\n      // Abort the event listener.\n      abortController.abort(); // Cleanup the promise.\n\n      resolve();\n    };\n  });\n  return {\n    promise: promise,\n    controller: controller\n  };\n}\n\nexports.monitorWindowError = monitorWindowError;","map":{"version":3,"sources":["../src/window-listener.ts"],"names":[],"mappings":";;;;;AAAA,IAAA,kBAAA,GAAA,OAAA,CAAA,oBAAA,CAAA;;AAEa,OAAA,CAAA,iBAAA,GAAoB,eAApB;AACA,OAAA,CAAA,oBAAA,GAAuB,YAAvB;AAEb;;AAEG;;AACH,SAAgB,kBAAhB,GAAkC;AAChC,MAAM,UAAU,GAAG,IAAI,kBAAA,CAAA,iBAAJ,EAAnB;AACA,MAAM,eAAe,GAAG,IAAI,eAAJ,EAAxB;AAEA,MAAM,OAAO,GAAkB,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAgB;AACzD,QAAM,WAAW,GAAG,UAAU,CAAV,EAAgB;AAClC,MAAA,MAAM,CAAC,mBAAP,CAA2B,OAAA,CAAA,oBAA3B,EAAiD,WAAjD;AAEA,UAAM,GAAG,GAAG,CAAC,CAAC,MAAd;AACA,MAAA,MAAM,CAAC,GAAD,CAAN;AACD,KALD,CADyD,CAOzD;;;AACA,IAAA,MAAM,CAAC,gBAAP,CAAwB,OAAA,CAAA,oBAAxB,EAA8C,WAA9C,EAA2D;AACzD,MAAA,MAAM,EAAE,eAAe,CAAC;AADiC,KAA3D,EARyD,CAYzD;;AACA,IAAA,UAAU,CAAC,OAAX,GAAqB,YAAA;AACnB;AACA,MAAA,eAAe,CAAC,KAAhB,GAFmB,CAGnB;;AACA,MAAA,OAAO;AACR,KALD;AAMD,GAnB8B,CAA/B;AAqBA,SAAO;AAAE,IAAA,OAAO,EAAA,OAAT;AAAW,IAAA,UAAU,EAAA;AAArB,GAAP;AACD;;AA1BD,OAAA,CAAA,kBAAA,GAAA,kBAAA","sourceRoot":"","sourcesContent":["\"use strict\";\nexports.__esModule = true;\nexports.monitorWindowError = exports.dispatchedErrorEvent = exports.errorWindowClosed = void 0;\nvar storage_listener_1 = require(\"./storage_listener\");\nexports.errorWindowClosed = \"window-closed\";\nexports.dispatchedErrorEvent = \"catchError\";\n/**\n * Checks if there has been an error from the window on an interval.\n */\nfunction monitorWindowError() {\n    var controller = new storage_listener_1.PromiseController();\n    var abortController = new AbortController();\n    var promise = new Promise(function (resolve, reject) {\n        var handleEvent = function (e) {\n            window.removeEventListener(exports.dispatchedErrorEvent, handleEvent);\n            var err = e.detail;\n            reject(err);\n        };\n        // @ts-expect-error doesn't recognize signal option.\n        window.addEventListener(exports.dispatchedErrorEvent, handleEvent, {\n            signal: abortController.signal\n        });\n        // Initialize cleanup function.\n        controller.cleanup = function () {\n            // Abort the event listener.\n            abortController.abort();\n            // Cleanup the promise.\n            resolve();\n        };\n    });\n    return { promise: promise, controller: controller };\n}\nexports.monitorWindowError = monitorWindowError;\n//# sourceMappingURL=window-listener.js.map"]},"metadata":{},"sourceType":"script"}