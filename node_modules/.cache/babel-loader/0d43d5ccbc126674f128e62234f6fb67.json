{"ast":null,"code":"import { ofType } from \"redux-observable\";\nimport { switchMap, map } from \"rxjs/operators\";\nimport { from } from \"rxjs\";\nimport { setLoaderDisplay } from \"./SnLoaderAction\";\nimport { EPIC_TY_SET_APP_COMMENTS, EPIC_TY_GET_APP_COMMENTS } from \"../SnActionConstants\";\nimport { setAppComment, getAppComments } from \"../../service/SnSkappService\";\nimport { setAppCommentStore } from \"./SnAppCommentsAction\"; // app stats actions\n\nimport store from \"..\";\nexport const snSetAppCommentEpic = action$ => action$.pipe(ofType(EPIC_TY_SET_APP_COMMENTS), // do we need to change this to mergemap ? we dont want subscription to be overwritten\nswitchMap(action => {\n  store.dispatch(setLoaderDisplay(true));\n  return from(setAppComment(action.payload.appId, action.payload.data)).pipe(map(res => {\n    store.dispatch(setLoaderDisplay(false)); // Update Redux Store\n\n    return setAppCommentStore(res);\n  }));\n}));\nexport const snGetAppCommentsEpic = action$ => action$.pipe(ofType(EPIC_TY_GET_APP_COMMENTS), // do we need to change this to mergemap ? we dont want subscription to be overwritten\nswitchMap(action => {\n  store.dispatch(setLoaderDisplay(true));\n  return from(getAppComments(action.payload.appId)).pipe(map(res => {\n    store.dispatch(setLoaderDisplay(false)); // Update Redux Store\n\n    return setAppCommentStore(res);\n  }));\n}));","map":{"version":3,"sources":["C:/Users/Usama_Sadiq/Documents/React App/2/skapp-private/src/redux/action-reducers-epic/SnAppCommentsEpic.js"],"names":["ofType","switchMap","map","from","setLoaderDisplay","EPIC_TY_SET_APP_COMMENTS","EPIC_TY_GET_APP_COMMENTS","setAppComment","getAppComments","setAppCommentStore","store","snSetAppCommentEpic","action$","pipe","action","dispatch","payload","appId","data","res","snGetAppCommentsEpic"],"mappings":"AAAA,SAASA,MAAT,QAAuB,kBAAvB;AACA,SAASC,SAAT,EAAoBC,GAApB,QAA+B,gBAA/B;AACA,SAASC,IAAT,QAAqB,MAArB;AACA,SAASC,gBAAT,QAAiC,kBAAjC;AACA,SACIC,wBADJ,EAC8BC,wBAD9B,QAEO,sBAFP;AAGA,SAASC,aAAT,EAAwBC,cAAxB,QAA8C,8BAA9C;AACA,SAASC,kBAAT,QAAmC,uBAAnC,C,CACA;;AACA,OAAOC,KAAP,MAAkB,IAAlB;AAEA,OAAO,MAAMC,mBAAmB,GAAIC,OAAD,IAC/BA,OAAO,CACHC,IADJ,CACSb,MAAM,CAACK,wBAAD,CADf,EAEQ;AACAJ,SAAS,CAAEa,MAAD,IAAY;AAClBJ,EAAAA,KAAK,CAACK,QAAN,CAAeX,gBAAgB,CAAC,IAAD,CAA/B;AACA,SAAOD,IAAI,CAACI,aAAa,CAACO,MAAM,CAACE,OAAP,CAAeC,KAAhB,EAAuBH,MAAM,CAACE,OAAP,CAAeE,IAAtC,CAAd,CAAJ,CACFL,IADE,CAECX,GAAG,CAAEiB,GAAD,IAAS;AACTT,IAAAA,KAAK,CAACK,QAAN,CAAeX,gBAAgB,CAAC,KAAD,CAA/B,EADS,CAET;;AACA,WAAOK,kBAAkB,CAACU,GAAD,CAAzB;AACH,GAJE,CAFJ,CAAP;AAQH,CAVQ,CAHjB,CADG;AAgBP,OAAO,MAAMC,oBAAoB,GAAIR,OAAD,IAChCA,OAAO,CACHC,IADJ,CACSb,MAAM,CAACM,wBAAD,CADf,EAEQ;AACAL,SAAS,CAAEa,MAAD,IAAY;AAClBJ,EAAAA,KAAK,CAACK,QAAN,CAAeX,gBAAgB,CAAC,IAAD,CAA/B;AACA,SAAOD,IAAI,CAACK,cAAc,CAACM,MAAM,CAACE,OAAP,CAAeC,KAAhB,CAAf,CAAJ,CACFJ,IADE,CAECX,GAAG,CAAEiB,GAAD,IAAS;AACTT,IAAAA,KAAK,CAACK,QAAN,CAAeX,gBAAgB,CAAC,KAAD,CAA/B,EADS,CAET;;AACA,WAAOK,kBAAkB,CAACU,GAAD,CAAzB;AACH,GAJE,CAFJ,CAAP;AAQH,CAVQ,CAHjB,CADG","sourcesContent":["import { ofType } from \"redux-observable\"\r\nimport { switchMap, map } from \"rxjs/operators\"\r\nimport { from } from \"rxjs\"\r\nimport { setLoaderDisplay } from \"./SnLoaderAction\"\r\nimport {\r\n    EPIC_TY_SET_APP_COMMENTS, EPIC_TY_GET_APP_COMMENTS\r\n} from \"../SnActionConstants\";\r\nimport { setAppComment, getAppComments } from \"../../service/SnSkappService\"\r\nimport { setAppCommentStore } from \"./SnAppCommentsAction\"\r\n// app stats actions\r\nimport store from \"..\"\r\n\r\nexport const snSetAppCommentEpic = (action$) =>\r\n    action$.\r\n        pipe(ofType(EPIC_TY_SET_APP_COMMENTS),\r\n            // do we need to change this to mergemap ? we dont want subscription to be overwritten\r\n            switchMap((action) => {\r\n                store.dispatch(setLoaderDisplay(true))\r\n                return from(setAppComment(action.payload.appId, action.payload.data))\r\n                    .pipe(\r\n                        map((res) => {\r\n                            store.dispatch(setLoaderDisplay(false))\r\n                            // Update Redux Store\r\n                            return setAppCommentStore(res)\r\n                        })\r\n                    )\r\n            }));\r\n\r\nexport const snGetAppCommentsEpic = (action$) =>\r\n    action$.\r\n        pipe(ofType(EPIC_TY_GET_APP_COMMENTS),\r\n            // do we need to change this to mergemap ? we dont want subscription to be overwritten\r\n            switchMap((action) => {\r\n                store.dispatch(setLoaderDisplay(true))\r\n                return from(getAppComments(action.payload.appId))\r\n                    .pipe(\r\n                        map((res) => {\r\n                            store.dispatch(setLoaderDisplay(false))\r\n                            // Update Redux Store\r\n                            return setAppCommentStore(res)\r\n                        })\r\n                    )\r\n            }));"]},"metadata":{},"sourceType":"module"}