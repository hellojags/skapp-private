{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.downloadFile = downloadFile;\nexports.downloadFileHns = downloadFileHns;\nexports.getSkylinkUrl = getSkylinkUrl;\nexports.getHnsUrl = getHnsUrl;\nexports.getHnsresUrl = getHnsresUrl;\nexports.getMetadata = getMetadata;\nexports.getFileContent = getFileContent;\nexports.getFileContentHns = getFileContentHns;\nexports.getFileContentRequest = getFileContentRequest;\nexports.openFile = openFile;\nexports.openFileHns = openFileHns;\nexports.resolveHns = resolveHns;\nexports.defaultDownloadOptions = void 0;\n\nvar _options = require(\"./utils/options\");\n\nvar _skylink = require(\"./utils/skylink\");\n\nvar _string = require(\"./utils/string\");\n\nvar _url = require(\"./utils/url\");\n\nvar _validation = require(\"./utils/validation\");\n\nconst defaultDownloadOptions = { ..._options.defaultBaseOptions,\n  endpointDownload: \"/\",\n  download: false,\n  noResponseMetadata: false,\n  path: undefined,\n  query: undefined,\n  subdomain: false\n};\nexports.defaultDownloadOptions = defaultDownloadOptions;\nconst defaultDownloadHnsOptions = { ...defaultDownloadOptions,\n  endpointDownloadHns: \"hns\",\n  hnsSubdomain: \"hns\"\n};\nconst defaultResolveHnsOptions = { ..._options.defaultBaseOptions,\n  endpointDownloadHnsres: \"hnsres\"\n};\n/**\n * Initiates a download of the content of the skylink within the browser.\n *\n * @param this - SkynetClient\n * @param skylinkUrl - 46-character skylink, or a valid skylink URL. Can be followed by a path. Note that the skylink will not be encoded, so if your path might contain special characters, consider using `customOptions.path`.\n * @param [customOptions] - Additional settings that can optionally be set.\n * @param [customOptions.endpointPath=\"/\"] - The relative URL path of the portal endpoint to contact.\n * @returns - The full URL that was used.\n * @throws - Will throw if the skylinkUrl does not contain a skylink or if the path option is not a string.\n */\n\nasync function downloadFile(skylinkUrl, customOptions) {\n  // Validation is done in `getSkylinkUrl`.\n  const opts = { ...defaultDownloadOptions,\n    ...this.customOptions,\n    ...customOptions,\n    download: true\n  };\n  const url = await this.getSkylinkUrl(skylinkUrl, opts); // Download the url.\n\n  window.location.assign(url);\n  return url;\n}\n/**\n * Initiates a download of the content of the skylink at the Handshake domain.\n *\n * @param this - SkynetClient\n * @param domain - Handshake domain.\n * @param [customOptions] - Additional settings that can optionally be set.\n * @param [customOptions.endpointPath=\"/hns\"] - The relative URL path of the portal endpoint to contact.\n * @returns - The full URL that was used.\n * @throws - Will throw if the input domain is not a string.\n */\n\n\nasync function downloadFileHns(domain, customOptions) {\n  // Validation is done in `getHnsUrl`.\n  const opts = { ...defaultDownloadHnsOptions,\n    ...this.customOptions,\n    ...customOptions,\n    download: true\n  };\n  const url = await this.getHnsUrl(domain, opts); // Download the url.\n\n  window.location.assign(url);\n  return url;\n}\n/**\n * Constructs the full URL for the given skylink.\n *\n * @param this - SkynetClient\n * @param skylinkUrl - Skylink string. See `downloadFile`.\n * @param [customOptions] - Additional settings that can optionally be set.\n * @param [customOptions.endpointPath=\"/\"] - The relative URL path of the portal endpoint to contact.\n * @returns - The full URL for the skylink.\n * @throws - Will throw if the skylinkUrl does not contain a skylink or if the path option is not a string.\n */\n\n\nasync function getSkylinkUrl(skylinkUrl, customOptions) {\n  // Validation is done in `getSkylinkUrlForPortal`.\n  const opts = { ...defaultDownloadOptions,\n    ...this.customOptions,\n    ...customOptions\n  };\n  const portalUrl = await this.portalUrl();\n  return (0, _url.getSkylinkUrlForPortal)(portalUrl, skylinkUrl, opts);\n}\n/**\n * Constructs the full URL for the given HNS domain.\n *\n * @param this - SkynetClient\n * @param domain - Handshake domain.\n * @param [customOptions={}] - Additional settings that can optionally be set.\n * @param [customOptions.endpointPath=\"/hns\"] - The relative URL path of the portal endpoint to contact.\n * @returns - The full URL for the HNS domain.\n * @throws - Will throw if the input domain is not a string.\n */\n\n\nasync function getHnsUrl(domain, customOptions) {\n  var _opts$query;\n\n  (0, _validation.validateString)(\"domain\", domain, \"parameter\");\n  (0, _validation.validateOptionalObject)(\"customOptions\", customOptions, \"parameter\", defaultDownloadHnsOptions);\n  const opts = { ...defaultDownloadHnsOptions,\n    ...this.customOptions,\n    ...customOptions\n  };\n  const query = (_opts$query = opts.query) !== null && _opts$query !== void 0 ? _opts$query : {};\n\n  if (opts.download) {\n    query.attachment = true;\n  }\n\n  if (opts.noResponseMetadata) {\n    query[\"no-response-metadata\"] = true;\n  }\n\n  domain = (0, _string.trimUriPrefix)(domain, _skylink.uriHandshakePrefix);\n  const portalUrl = await this.portalUrl();\n  const url = opts.subdomain ? (0, _url.addSubdomain)((0, _url.addSubdomain)(portalUrl, opts.hnsSubdomain), domain) : (0, _url.makeUrl)(portalUrl, opts.endpointDownloadHns, domain);\n  return (0, _url.addUrlQuery)(url, query);\n}\n/**\n * Constructs the full URL for the resolver for the given HNS domain.\n *\n * @param this - SkynetClient\n * @param domain - Handshake domain.\n * @param [customOptions={}] - Additional settings that can optionally be set.\n * @param [customOptions.endpointPath=\"/hnsres\"] - The relative URL path of the portal endpoint to contact.\n * @returns - The full URL for the resolver for the HNS domain.\n * @throws - Will throw if the input domain is not a string.\n */\n\n\nasync function getHnsresUrl(domain, customOptions) {\n  (0, _validation.validateString)(\"domain\", domain, \"parameter\");\n  (0, _validation.validateOptionalObject)(\"customOptions\", customOptions, \"parameter\", defaultResolveHnsOptions);\n  const opts = { ...defaultResolveHnsOptions,\n    ...this.customOptions,\n    ...customOptions\n  };\n  domain = (0, _string.trimUriPrefix)(domain, _skylink.uriHandshakeResolverPrefix);\n  const portalUrl = await this.portalUrl();\n  return (0, _url.makeUrl)(portalUrl, opts.endpointDownloadHnsres, domain);\n}\n/**\n * Gets only the metadata for the given skylink without the contents.\n *\n * @param this - SkynetClient\n * @param skylinkUrl - Skylink string. See `downloadFile`.\n * @param [customOptions] - Additional settings that can optionally be set. See `downloadFile` for the full list.\n * @param [customOptions.endpointPath=\"/\"] - The relative URL path of the portal endpoint to contact.\n * @returns - The metadata in JSON format. Empty if no metadata was found.\n * @throws - Will throw if the skylinkUrl does not contain a skylink or if the path option is not a string.\n */\n\n\nasync function getMetadata(skylinkUrl, customOptions) {\n  var _response$headers$con, _response$headers$sky; // Validation is done in `getSkylinkUrl`.\n\n\n  const opts = { ...defaultDownloadOptions,\n    ...this.customOptions,\n    ...customOptions\n  };\n  const url = await this.getSkylinkUrl(skylinkUrl, opts);\n  const response = await this.executeRequest({ ...opts,\n    endpointPath: opts.endpointDownload,\n    method: \"head\",\n    url\n  });\n\n  if (typeof response.headers === \"undefined\") {\n    throw new Error(\"Did not get 'headers' in response despite a successful request. Please try again and report this issue to the devs if it persists.\");\n  }\n\n  const contentType = (_response$headers$con = response.headers[\"content-type\"]) !== null && _response$headers$con !== void 0 ? _response$headers$con : \"\";\n  const metadata = response.headers[\"skynet-file-metadata\"] ? JSON.parse(response.headers[\"skynet-file-metadata\"]) : {};\n  const portalUrl = (_response$headers$sky = response.headers[\"skynet-portal-api\"]) !== null && _response$headers$sky !== void 0 ? _response$headers$sky : \"\";\n  const skylink = response.headers[\"skynet-skylink\"] ? (0, _skylink.formatSkylink)(response.headers[\"skynet-skylink\"]) : \"\";\n  return {\n    contentType,\n    metadata,\n    portalUrl,\n    skylink\n  };\n}\n/**\n * Gets the contents of the file at the given skylink.\n *\n * @param this - SkynetClient\n * @param skylinkUrl - Skylink string. See `downloadFile`.\n * @param [customOptions] - Additional settings that can optionally be set.\n * @param [customOptions.endpointPath=\"/\"] - The relative URL path of the portal endpoint to contact.\n * @returns - An object containing the data of the file, the content-type, metadata, and the file's skylink.\n * @throws - Will throw if the skylinkUrl does not contain a skylink or if the path option is not a string.\n */\n\n\nasync function getFileContent(skylinkUrl, customOptions) {\n  // Validation is done in `getSkylinkUrl`.\n  const opts = { ...defaultDownloadOptions,\n    ...this.customOptions,\n    ...customOptions\n  };\n  const url = await this.getSkylinkUrl(skylinkUrl, opts);\n  return this.getFileContentRequest(url, opts);\n}\n/**\n * Gets the contents of the file at the given Handshake domain.\n *\n * @param this - SkynetClient\n * @param domain - Handshake domain.\n * @param [customOptions] - Additional settings that can optionally be set.\n * @param [customOptions.endpointPath=\"/hns\"] - The relative URL path of the portal endpoint to contact.\n * @returns - An object containing the data of the file, the content-type, metadata, and the file's skylink.\n * @throws - Will throw if the domain does not contain a skylink.\n */\n\n\nasync function getFileContentHns(domain, customOptions) {\n  // Validation is done in `getHnsUrl`.\n  const opts = { ...defaultDownloadHnsOptions,\n    ...this.customOptions,\n    ...customOptions\n  };\n  const url = await this.getHnsUrl(domain, opts);\n  return this.getFileContentRequest(url, opts);\n}\n/**\n * Does a GET request of the skylink, returning the data property of the response.\n *\n * @param this - SkynetClient\n * @param url - URL.\n * @param [customOptions] - Additional settings that can optionally be set.\n * @returns - An object containing the data of the file, the content-type, metadata, and the file's skylink.\n * @throws - Will throw if the request does not succeed or the response is missing data.\n */\n\n\nasync function getFileContentRequest(url, customOptions) {\n  var _response$headers$con2, _response$headers$sky2; // Not publicly available, don't validate input.\n\n\n  const opts = { ...defaultDownloadOptions,\n    ...this.customOptions,\n    ...customOptions\n  }; // GET request the data at the skylink.\n\n  const response = await this.executeRequest({ ...opts,\n    endpointPath: opts.endpointDownload,\n    method: \"get\",\n    url\n  });\n\n  if (typeof response.data === \"undefined\") {\n    throw new Error(\"Did not get 'data' in response despite a successful request. Please try again and report this issue to the devs if it persists.\");\n  }\n\n  if (typeof response.headers === \"undefined\") {\n    throw new Error(\"Did not get 'headers' in response despite a successful request. Please try again and report this issue to the devs if it persists.\");\n  }\n\n  const contentType = (_response$headers$con2 = response.headers[\"content-type\"]) !== null && _response$headers$con2 !== void 0 ? _response$headers$con2 : \"\";\n  const metadata = response.headers[\"skynet-file-metadata\"] ? JSON.parse(response.headers[\"skynet-file-metadata\"]) : {};\n  const portalUrl = (_response$headers$sky2 = response.headers[\"skynet-portal-api\"]) !== null && _response$headers$sky2 !== void 0 ? _response$headers$sky2 : \"\";\n  const skylink = response.headers[\"skynet-skylink\"] ? (0, _skylink.formatSkylink)(response.headers[\"skynet-skylink\"]) : \"\";\n  return {\n    data: response.data,\n    contentType,\n    portalUrl,\n    metadata,\n    skylink\n  };\n}\n/**\n * Opens the content of the skylink within the browser.\n *\n * @param this - SkynetClient\n * @param skylinkUrl - Skylink string. See `downloadFile`.\n * @param [customOptions] - Additional settings that can optionally be set. See `downloadFile` for the full list.\n * @param [customOptions.endpointPath=\"/\"] - The relative URL path of the portal endpoint to contact.\n * @returns - The full URL that was used.\n * @throws - Will throw if the skylinkUrl does not contain a skylink or if the path option is not a string.\n */\n\n\nasync function openFile(skylinkUrl, customOptions) {\n  // Validation is done in `getSkylinkUrl`.\n  const opts = { ...defaultDownloadOptions,\n    ...this.customOptions,\n    ...customOptions\n  };\n  const url = await this.getSkylinkUrl(skylinkUrl, opts);\n  window.open(url, \"_blank\");\n  return url;\n}\n/**\n * Opens the content of the skylink from the given Handshake domain within the browser.\n *\n * @param this - SkynetClient\n * @param domain - Handshake domain.\n * @param [customOptions] - Additional settings that can optionally be set. See `downloadFileHns` for the full list.\n * @param [customOptions.endpointPath=\"/hns\"] - The relative URL path of the portal endpoint to contact.\n * @returns - The full URL that was used.\n * @throws - Will throw if the input domain is not a string.\n */\n\n\nasync function openFileHns(domain, customOptions) {\n  // Validation is done in `getHnsUrl`.\n  const opts = { ...defaultDownloadHnsOptions,\n    ...this.customOptions,\n    ...customOptions\n  };\n  const url = await this.getHnsUrl(domain, opts); // Open the url in a new tab.\n\n  window.open(url, \"_blank\");\n  return url;\n}\n/**\n * Resolves the given HNS domain to its TXT record and returns the data.\n *\n * @param this - SkynetClient\n * @param domain - Handshake resolver domain.\n * @param [customOptions={}] - Additional settings that can optionally be set.\n * @param [customOptions.endpointPath=\"/hnsres\"] - The relative URL path of the portal endpoint to contact.\n * @returns - The data for the TXT record.\n * @throws - Will throw if the input domain is not a string.\n */\n\n\nasync function resolveHns(domain, customOptions) {\n  // Validation is done in `getHnsresUrl`.\n  const opts = { ...defaultResolveHnsOptions,\n    ...this.customOptions,\n    ...customOptions\n  };\n  const url = await this.getHnsresUrl(domain, opts); // Get the txt record from the hnsres domain on the portal.\n\n  const response = await this.executeRequest({ ...opts,\n    endpointPath: opts.endpointDownloadHnsres,\n    method: \"get\",\n    url\n  });\n  validateResolveHnsResponse(response);\n  return response.data;\n}\n\nfunction validateResolveHnsResponse(response) {\n  try {\n    if (!response.data) {\n      throw new Error(\"response.data field missing\");\n    }\n\n    (0, _validation.validateString)(\"response.data.skylink\", response.data.skylink, \"upload response field\");\n  } catch (err) {\n    throw new Error(\"Did not get a complete resolve HNS response despite a successful request. Please try again and report this issue to the devs if it persists. Error: \".concat(err));\n  }\n}","map":{"version":3,"sources":["C:/Users/Usama_Sadiq/Documents/React App/2/skapp-private/node_modules/skynet-js/dist/download.js"],"names":["Object","defineProperty","exports","value","downloadFile","downloadFileHns","getSkylinkUrl","getHnsUrl","getHnsresUrl","getMetadata","getFileContent","getFileContentHns","getFileContentRequest","openFile","openFileHns","resolveHns","defaultDownloadOptions","_options","require","_skylink","_string","_url","_validation","defaultBaseOptions","endpointDownload","download","noResponseMetadata","path","undefined","query","subdomain","defaultDownloadHnsOptions","endpointDownloadHns","hnsSubdomain","defaultResolveHnsOptions","endpointDownloadHnsres","skylinkUrl","customOptions","opts","url","window","location","assign","domain","portalUrl","getSkylinkUrlForPortal","_opts$query","validateString","validateOptionalObject","attachment","trimUriPrefix","uriHandshakePrefix","addSubdomain","makeUrl","addUrlQuery","uriHandshakeResolverPrefix","_response$headers$con","_response$headers$sky","response","executeRequest","endpointPath","method","headers","Error","contentType","metadata","JSON","parse","skylink","formatSkylink","_response$headers$con2","_response$headers$sky2","data","open","validateResolveHnsResponse","err","concat"],"mappings":"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","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.downloadFile = downloadFile;\nexports.downloadFileHns = downloadFileHns;\nexports.getSkylinkUrl = getSkylinkUrl;\nexports.getHnsUrl = getHnsUrl;\nexports.getHnsresUrl = getHnsresUrl;\nexports.getMetadata = getMetadata;\nexports.getFileContent = getFileContent;\nexports.getFileContentHns = getFileContentHns;\nexports.getFileContentRequest = getFileContentRequest;\nexports.openFile = openFile;\nexports.openFileHns = openFileHns;\nexports.resolveHns = resolveHns;\nexports.defaultDownloadOptions = void 0;\n\nvar _options = require(\"./utils/options\");\n\nvar _skylink = require(\"./utils/skylink\");\n\nvar _string = require(\"./utils/string\");\n\nvar _url = require(\"./utils/url\");\n\nvar _validation = require(\"./utils/validation\");\n\nconst defaultDownloadOptions = { ..._options.defaultBaseOptions,\n  endpointDownload: \"/\",\n  download: false,\n  noResponseMetadata: false,\n  path: undefined,\n  query: undefined,\n  subdomain: false\n};\nexports.defaultDownloadOptions = defaultDownloadOptions;\nconst defaultDownloadHnsOptions = { ...defaultDownloadOptions,\n  endpointDownloadHns: \"hns\",\n  hnsSubdomain: \"hns\"\n};\nconst defaultResolveHnsOptions = { ..._options.defaultBaseOptions,\n  endpointDownloadHnsres: \"hnsres\"\n};\n/**\n * Initiates a download of the content of the skylink within the browser.\n *\n * @param this - SkynetClient\n * @param skylinkUrl - 46-character skylink, or a valid skylink URL. Can be followed by a path. Note that the skylink will not be encoded, so if your path might contain special characters, consider using `customOptions.path`.\n * @param [customOptions] - Additional settings that can optionally be set.\n * @param [customOptions.endpointPath=\"/\"] - The relative URL path of the portal endpoint to contact.\n * @returns - The full URL that was used.\n * @throws - Will throw if the skylinkUrl does not contain a skylink or if the path option is not a string.\n */\n\nasync function downloadFile(skylinkUrl, customOptions) {\n  // Validation is done in `getSkylinkUrl`.\n  const opts = { ...defaultDownloadOptions,\n    ...this.customOptions,\n    ...customOptions,\n    download: true\n  };\n  const url = await this.getSkylinkUrl(skylinkUrl, opts); // Download the url.\n\n  window.location.assign(url);\n  return url;\n}\n/**\n * Initiates a download of the content of the skylink at the Handshake domain.\n *\n * @param this - SkynetClient\n * @param domain - Handshake domain.\n * @param [customOptions] - Additional settings that can optionally be set.\n * @param [customOptions.endpointPath=\"/hns\"] - The relative URL path of the portal endpoint to contact.\n * @returns - The full URL that was used.\n * @throws - Will throw if the input domain is not a string.\n */\n\n\nasync function downloadFileHns(domain, customOptions) {\n  // Validation is done in `getHnsUrl`.\n  const opts = { ...defaultDownloadHnsOptions,\n    ...this.customOptions,\n    ...customOptions,\n    download: true\n  };\n  const url = await this.getHnsUrl(domain, opts); // Download the url.\n\n  window.location.assign(url);\n  return url;\n}\n/**\n * Constructs the full URL for the given skylink.\n *\n * @param this - SkynetClient\n * @param skylinkUrl - Skylink string. See `downloadFile`.\n * @param [customOptions] - Additional settings that can optionally be set.\n * @param [customOptions.endpointPath=\"/\"] - The relative URL path of the portal endpoint to contact.\n * @returns - The full URL for the skylink.\n * @throws - Will throw if the skylinkUrl does not contain a skylink or if the path option is not a string.\n */\n\n\nasync function getSkylinkUrl(skylinkUrl, customOptions) {\n  // Validation is done in `getSkylinkUrlForPortal`.\n  const opts = { ...defaultDownloadOptions,\n    ...this.customOptions,\n    ...customOptions\n  };\n  const portalUrl = await this.portalUrl();\n  return (0, _url.getSkylinkUrlForPortal)(portalUrl, skylinkUrl, opts);\n}\n/**\n * Constructs the full URL for the given HNS domain.\n *\n * @param this - SkynetClient\n * @param domain - Handshake domain.\n * @param [customOptions={}] - Additional settings that can optionally be set.\n * @param [customOptions.endpointPath=\"/hns\"] - The relative URL path of the portal endpoint to contact.\n * @returns - The full URL for the HNS domain.\n * @throws - Will throw if the input domain is not a string.\n */\n\n\nasync function getHnsUrl(domain, customOptions) {\n  var _opts$query;\n\n  (0, _validation.validateString)(\"domain\", domain, \"parameter\");\n  (0, _validation.validateOptionalObject)(\"customOptions\", customOptions, \"parameter\", defaultDownloadHnsOptions);\n  const opts = { ...defaultDownloadHnsOptions,\n    ...this.customOptions,\n    ...customOptions\n  };\n  const query = (_opts$query = opts.query) !== null && _opts$query !== void 0 ? _opts$query : {};\n\n  if (opts.download) {\n    query.attachment = true;\n  }\n\n  if (opts.noResponseMetadata) {\n    query[\"no-response-metadata\"] = true;\n  }\n\n  domain = (0, _string.trimUriPrefix)(domain, _skylink.uriHandshakePrefix);\n  const portalUrl = await this.portalUrl();\n  const url = opts.subdomain ? (0, _url.addSubdomain)((0, _url.addSubdomain)(portalUrl, opts.hnsSubdomain), domain) : (0, _url.makeUrl)(portalUrl, opts.endpointDownloadHns, domain);\n  return (0, _url.addUrlQuery)(url, query);\n}\n/**\n * Constructs the full URL for the resolver for the given HNS domain.\n *\n * @param this - SkynetClient\n * @param domain - Handshake domain.\n * @param [customOptions={}] - Additional settings that can optionally be set.\n * @param [customOptions.endpointPath=\"/hnsres\"] - The relative URL path of the portal endpoint to contact.\n * @returns - The full URL for the resolver for the HNS domain.\n * @throws - Will throw if the input domain is not a string.\n */\n\n\nasync function getHnsresUrl(domain, customOptions) {\n  (0, _validation.validateString)(\"domain\", domain, \"parameter\");\n  (0, _validation.validateOptionalObject)(\"customOptions\", customOptions, \"parameter\", defaultResolveHnsOptions);\n  const opts = { ...defaultResolveHnsOptions,\n    ...this.customOptions,\n    ...customOptions\n  };\n  domain = (0, _string.trimUriPrefix)(domain, _skylink.uriHandshakeResolverPrefix);\n  const portalUrl = await this.portalUrl();\n  return (0, _url.makeUrl)(portalUrl, opts.endpointDownloadHnsres, domain);\n}\n/**\n * Gets only the metadata for the given skylink without the contents.\n *\n * @param this - SkynetClient\n * @param skylinkUrl - Skylink string. See `downloadFile`.\n * @param [customOptions] - Additional settings that can optionally be set. See `downloadFile` for the full list.\n * @param [customOptions.endpointPath=\"/\"] - The relative URL path of the portal endpoint to contact.\n * @returns - The metadata in JSON format. Empty if no metadata was found.\n * @throws - Will throw if the skylinkUrl does not contain a skylink or if the path option is not a string.\n */\n\n\nasync function getMetadata(skylinkUrl, customOptions) {\n  var _response$headers$con, _response$headers$sky;\n\n  // Validation is done in `getSkylinkUrl`.\n  const opts = { ...defaultDownloadOptions,\n    ...this.customOptions,\n    ...customOptions\n  };\n  const url = await this.getSkylinkUrl(skylinkUrl, opts);\n  const response = await this.executeRequest({ ...opts,\n    endpointPath: opts.endpointDownload,\n    method: \"head\",\n    url\n  });\n\n  if (typeof response.headers === \"undefined\") {\n    throw new Error(\"Did not get 'headers' in response despite a successful request. Please try again and report this issue to the devs if it persists.\");\n  }\n\n  const contentType = (_response$headers$con = response.headers[\"content-type\"]) !== null && _response$headers$con !== void 0 ? _response$headers$con : \"\";\n  const metadata = response.headers[\"skynet-file-metadata\"] ? JSON.parse(response.headers[\"skynet-file-metadata\"]) : {};\n  const portalUrl = (_response$headers$sky = response.headers[\"skynet-portal-api\"]) !== null && _response$headers$sky !== void 0 ? _response$headers$sky : \"\";\n  const skylink = response.headers[\"skynet-skylink\"] ? (0, _skylink.formatSkylink)(response.headers[\"skynet-skylink\"]) : \"\";\n  return {\n    contentType,\n    metadata,\n    portalUrl,\n    skylink\n  };\n}\n/**\n * Gets the contents of the file at the given skylink.\n *\n * @param this - SkynetClient\n * @param skylinkUrl - Skylink string. See `downloadFile`.\n * @param [customOptions] - Additional settings that can optionally be set.\n * @param [customOptions.endpointPath=\"/\"] - The relative URL path of the portal endpoint to contact.\n * @returns - An object containing the data of the file, the content-type, metadata, and the file's skylink.\n * @throws - Will throw if the skylinkUrl does not contain a skylink or if the path option is not a string.\n */\n\n\nasync function getFileContent(skylinkUrl, customOptions) {\n  // Validation is done in `getSkylinkUrl`.\n  const opts = { ...defaultDownloadOptions,\n    ...this.customOptions,\n    ...customOptions\n  };\n  const url = await this.getSkylinkUrl(skylinkUrl, opts);\n  return this.getFileContentRequest(url, opts);\n}\n/**\n * Gets the contents of the file at the given Handshake domain.\n *\n * @param this - SkynetClient\n * @param domain - Handshake domain.\n * @param [customOptions] - Additional settings that can optionally be set.\n * @param [customOptions.endpointPath=\"/hns\"] - The relative URL path of the portal endpoint to contact.\n * @returns - An object containing the data of the file, the content-type, metadata, and the file's skylink.\n * @throws - Will throw if the domain does not contain a skylink.\n */\n\n\nasync function getFileContentHns(domain, customOptions) {\n  // Validation is done in `getHnsUrl`.\n  const opts = { ...defaultDownloadHnsOptions,\n    ...this.customOptions,\n    ...customOptions\n  };\n  const url = await this.getHnsUrl(domain, opts);\n  return this.getFileContentRequest(url, opts);\n}\n/**\n * Does a GET request of the skylink, returning the data property of the response.\n *\n * @param this - SkynetClient\n * @param url - URL.\n * @param [customOptions] - Additional settings that can optionally be set.\n * @returns - An object containing the data of the file, the content-type, metadata, and the file's skylink.\n * @throws - Will throw if the request does not succeed or the response is missing data.\n */\n\n\nasync function getFileContentRequest(url, customOptions) {\n  var _response$headers$con2, _response$headers$sky2;\n\n  // Not publicly available, don't validate input.\n  const opts = { ...defaultDownloadOptions,\n    ...this.customOptions,\n    ...customOptions\n  }; // GET request the data at the skylink.\n\n  const response = await this.executeRequest({ ...opts,\n    endpointPath: opts.endpointDownload,\n    method: \"get\",\n    url\n  });\n\n  if (typeof response.data === \"undefined\") {\n    throw new Error(\"Did not get 'data' in response despite a successful request. Please try again and report this issue to the devs if it persists.\");\n  }\n\n  if (typeof response.headers === \"undefined\") {\n    throw new Error(\"Did not get 'headers' in response despite a successful request. Please try again and report this issue to the devs if it persists.\");\n  }\n\n  const contentType = (_response$headers$con2 = response.headers[\"content-type\"]) !== null && _response$headers$con2 !== void 0 ? _response$headers$con2 : \"\";\n  const metadata = response.headers[\"skynet-file-metadata\"] ? JSON.parse(response.headers[\"skynet-file-metadata\"]) : {};\n  const portalUrl = (_response$headers$sky2 = response.headers[\"skynet-portal-api\"]) !== null && _response$headers$sky2 !== void 0 ? _response$headers$sky2 : \"\";\n  const skylink = response.headers[\"skynet-skylink\"] ? (0, _skylink.formatSkylink)(response.headers[\"skynet-skylink\"]) : \"\";\n  return {\n    data: response.data,\n    contentType,\n    portalUrl,\n    metadata,\n    skylink\n  };\n}\n/**\n * Opens the content of the skylink within the browser.\n *\n * @param this - SkynetClient\n * @param skylinkUrl - Skylink string. See `downloadFile`.\n * @param [customOptions] - Additional settings that can optionally be set. See `downloadFile` for the full list.\n * @param [customOptions.endpointPath=\"/\"] - The relative URL path of the portal endpoint to contact.\n * @returns - The full URL that was used.\n * @throws - Will throw if the skylinkUrl does not contain a skylink or if the path option is not a string.\n */\n\n\nasync function openFile(skylinkUrl, customOptions) {\n  // Validation is done in `getSkylinkUrl`.\n  const opts = { ...defaultDownloadOptions,\n    ...this.customOptions,\n    ...customOptions\n  };\n  const url = await this.getSkylinkUrl(skylinkUrl, opts);\n  window.open(url, \"_blank\");\n  return url;\n}\n/**\n * Opens the content of the skylink from the given Handshake domain within the browser.\n *\n * @param this - SkynetClient\n * @param domain - Handshake domain.\n * @param [customOptions] - Additional settings that can optionally be set. See `downloadFileHns` for the full list.\n * @param [customOptions.endpointPath=\"/hns\"] - The relative URL path of the portal endpoint to contact.\n * @returns - The full URL that was used.\n * @throws - Will throw if the input domain is not a string.\n */\n\n\nasync function openFileHns(domain, customOptions) {\n  // Validation is done in `getHnsUrl`.\n  const opts = { ...defaultDownloadHnsOptions,\n    ...this.customOptions,\n    ...customOptions\n  };\n  const url = await this.getHnsUrl(domain, opts); // Open the url in a new tab.\n\n  window.open(url, \"_blank\");\n  return url;\n}\n/**\n * Resolves the given HNS domain to its TXT record and returns the data.\n *\n * @param this - SkynetClient\n * @param domain - Handshake resolver domain.\n * @param [customOptions={}] - Additional settings that can optionally be set.\n * @param [customOptions.endpointPath=\"/hnsres\"] - The relative URL path of the portal endpoint to contact.\n * @returns - The data for the TXT record.\n * @throws - Will throw if the input domain is not a string.\n */\n\n\nasync function resolveHns(domain, customOptions) {\n  // Validation is done in `getHnsresUrl`.\n  const opts = { ...defaultResolveHnsOptions,\n    ...this.customOptions,\n    ...customOptions\n  };\n  const url = await this.getHnsresUrl(domain, opts); // Get the txt record from the hnsres domain on the portal.\n\n  const response = await this.executeRequest({ ...opts,\n    endpointPath: opts.endpointDownloadHnsres,\n    method: \"get\",\n    url\n  });\n  validateResolveHnsResponse(response);\n  return response.data;\n}\n\nfunction validateResolveHnsResponse(response) {\n  try {\n    if (!response.data) {\n      throw new Error(\"response.data field missing\");\n    }\n\n    (0, _validation.validateString)(\"response.data.skylink\", response.data.skylink, \"upload response field\");\n  } catch (err) {\n    throw new Error(\"Did not get a complete resolve HNS response despite a successful request. Please try again and report this issue to the devs if it persists. Error: \".concat(err));\n  }\n}"]},"metadata":{},"sourceType":"script"}