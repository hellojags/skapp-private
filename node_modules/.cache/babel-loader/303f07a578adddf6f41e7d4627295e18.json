{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateBigint = validateBigint;\nexports.validateObject = validateObject;\nexports.validateOptionalObject = validateOptionalObject;\nexports.validateNumber = validateNumber;\nexports.validateString = validateString;\nexports.validateHexString = validateHexString;\nexports.throwValidationError = throwValidationError;\n\nvar _string = require(\"./string\");\n/**\n * Validates the given value as a bigint.\n *\n * @param name - The name of the value.\n * @param value - The actual value.\n * @param valueKind - The kind of value that is being checked (e.g. \"parameter\", \"response field\", etc.)\n * @throws - Will throw if not a valid bigint.\n */\n\n\nfunction validateBigint(name, value, valueKind) {\n  if (typeof value !== \"bigint\") {\n    throwValidationError(name, value, valueKind, \"type 'bigint'\");\n  }\n}\n/**\n * Validates the given value as an object.\n *\n * @param name - The name of the value.\n * @param value - The actual value.\n * @param valueKind - The kind of value that is being checked (e.g. \"parameter\", \"response field\", etc.)\n * @throws - Will throw if not a valid object.\n */\n\n\nfunction validateObject(name, value, valueKind) {\n  if (typeof value !== \"object\") {\n    throwValidationError(name, value, valueKind, \"type 'object'\");\n  }\n\n  if (value === null) {\n    throwValidationError(name, value, valueKind, \"non-null\");\n  }\n}\n/**\n * Validates the given value as an optional object.\n *\n * @param name - The name of the value.\n * @param value - The actual value.\n * @param valueKind - The kind of value that is being checked (e.g. \"parameter\", \"response field\", etc.)\n * @param model - A model object that contains all possible fields. 'value' does not need to have all fields, but it may not have any fields not contained in 'model'.\n * @throws - Will throw if not a valid optional object.\n */\n\n\nfunction validateOptionalObject(name, value, valueKind, model) {\n  if (!value) {\n    // This is okay, the object is optional.\n    return;\n  }\n\n  validateObject(name, value, valueKind); // Check if all given properties of value also exist in the model.\n\n  for (const property in value) {\n    if (!(property in model)) {\n      throw new Error(\"Object \".concat(valueKind, \" '\").concat(name, \"' contains unexpected property '\").concat(property, \"'\"));\n    }\n  }\n}\n/**\n * Validates the given value as a number.\n *\n * @param name - The name of the value.\n * @param value - The actual value.\n * @param valueKind - The kind of value that is being checked (e.g. \"parameter\", \"response field\", etc.)\n * @throws - Will throw if not a valid number.\n */\n\n\nfunction validateNumber(name, value, valueKind) {\n  if (typeof value !== \"number\") {\n    throwValidationError(name, value, valueKind, \"type 'number'\");\n  }\n}\n/**\n * Validates the given value as a string.\n *\n * @param name - The name of the value.\n * @param value - The actual value.\n * @param valueKind - The kind of value that is being checked (e.g. \"parameter\", \"response field\", etc.)\n * @throws - Will throw if not a valid string.\n */\n\n\nfunction validateString(name, value, valueKind) {\n  if (typeof value !== \"string\") {\n    throwValidationError(name, value, valueKind, \"type 'string'\");\n  }\n}\n/**\n * Validates the given value as a hex-encoded string.\n *\n * @param name - The name of the value.\n * @param value - The actual value.\n * @param valueKind - The kind of value that is being checked (e.g. \"parameter\", \"response field\", etc.)\n * @throws - Will throw if not a valid hex-encoded string.\n */\n\n\nfunction validateHexString(name, value, valueKind) {\n  validateString(name, value, valueKind);\n\n  if (!(0, _string.isHexString)(value)) {\n    throwValidationError(name, value, valueKind, \"a hex-encoded string\");\n  }\n}\n/**\n * Throws an error for the given value\n *\n * @param name - The name of the value.\n * @param value - The actual value.\n * @param valueKind - The kind of value that is being checked (e.g. \"parameter\", \"response field\", etc.)\n * @param expected - The expected aspect of the value that could not be validated (e.g. \"type 'string'\" or \"non-null\").\n * @throws - Will always throw.\n */\n\n\nfunction throwValidationError(name, value, valueKind, expected) {\n  throw new Error(\"Expected \".concat(valueKind, \" '\").concat(name, \"' to be \").concat(expected, \", was '\").concat(value, \"'\"));\n}","map":{"version":3,"sources":["C:/Users/Usama_Sadiq/Documents/React App/2/skapp-private/node_modules/skynet-js/dist/utils/validation.js"],"names":["Object","defineProperty","exports","value","validateBigint","validateObject","validateOptionalObject","validateNumber","validateString","validateHexString","throwValidationError","_string","require","name","valueKind","model","property","Error","concat","isHexString","expected"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,cAAR,GAAyBA,cAAzB;AACAF,OAAO,CAACG,cAAR,GAAyBA,cAAzB;AACAH,OAAO,CAACI,sBAAR,GAAiCA,sBAAjC;AACAJ,OAAO,CAACK,cAAR,GAAyBA,cAAzB;AACAL,OAAO,CAACM,cAAR,GAAyBA,cAAzB;AACAN,OAAO,CAACO,iBAAR,GAA4BA,iBAA5B;AACAP,OAAO,CAACQ,oBAAR,GAA+BA,oBAA/B;;AAEA,IAAIC,OAAO,GAAGC,OAAO,CAAC,UAAD,CAArB;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASR,cAAT,CAAwBS,IAAxB,EAA8BV,KAA9B,EAAqCW,SAArC,EAAgD;AAC9C,MAAI,OAAOX,KAAP,KAAiB,QAArB,EAA+B;AAC7BO,IAAAA,oBAAoB,CAACG,IAAD,EAAOV,KAAP,EAAcW,SAAd,EAAyB,eAAzB,CAApB;AACD;AACF;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAAST,cAAT,CAAwBQ,IAAxB,EAA8BV,KAA9B,EAAqCW,SAArC,EAAgD;AAC9C,MAAI,OAAOX,KAAP,KAAiB,QAArB,EAA+B;AAC7BO,IAAAA,oBAAoB,CAACG,IAAD,EAAOV,KAAP,EAAcW,SAAd,EAAyB,eAAzB,CAApB;AACD;;AAED,MAAIX,KAAK,KAAK,IAAd,EAAoB;AAClBO,IAAAA,oBAAoB,CAACG,IAAD,EAAOV,KAAP,EAAcW,SAAd,EAAyB,UAAzB,CAApB;AACD;AACF;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAASR,sBAAT,CAAgCO,IAAhC,EAAsCV,KAAtC,EAA6CW,SAA7C,EAAwDC,KAAxD,EAA+D;AAC7D,MAAI,CAACZ,KAAL,EAAY;AACV;AACA;AACD;;AAEDE,EAAAA,cAAc,CAACQ,IAAD,EAAOV,KAAP,EAAcW,SAAd,CAAd,CAN6D,CAMrB;;AAExC,OAAK,MAAME,QAAX,IAAuBb,KAAvB,EAA8B;AAC5B,QAAI,EAAEa,QAAQ,IAAID,KAAd,CAAJ,EAA0B;AACxB,YAAM,IAAIE,KAAJ,CAAU,UAAUC,MAAV,CAAiBJ,SAAjB,EAA4B,IAA5B,EAAkCI,MAAlC,CAAyCL,IAAzC,EAA+C,kCAA/C,EAAmFK,MAAnF,CAA0FF,QAA1F,EAAoG,GAApG,CAAV,CAAN;AACD;AACF;AACF;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAAST,cAAT,CAAwBM,IAAxB,EAA8BV,KAA9B,EAAqCW,SAArC,EAAgD;AAC9C,MAAI,OAAOX,KAAP,KAAiB,QAArB,EAA+B;AAC7BO,IAAAA,oBAAoB,CAACG,IAAD,EAAOV,KAAP,EAAcW,SAAd,EAAyB,eAAzB,CAApB;AACD;AACF;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAASN,cAAT,CAAwBK,IAAxB,EAA8BV,KAA9B,EAAqCW,SAArC,EAAgD;AAC9C,MAAI,OAAOX,KAAP,KAAiB,QAArB,EAA+B;AAC7BO,IAAAA,oBAAoB,CAACG,IAAD,EAAOV,KAAP,EAAcW,SAAd,EAAyB,eAAzB,CAApB;AACD;AACF;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAASL,iBAAT,CAA2BI,IAA3B,EAAiCV,KAAjC,EAAwCW,SAAxC,EAAmD;AACjDN,EAAAA,cAAc,CAACK,IAAD,EAAOV,KAAP,EAAcW,SAAd,CAAd;;AAEA,MAAI,CAAC,CAAC,GAAGH,OAAO,CAACQ,WAAZ,EAAyBhB,KAAzB,CAAL,EAAsC;AACpCO,IAAAA,oBAAoB,CAACG,IAAD,EAAOV,KAAP,EAAcW,SAAd,EAAyB,sBAAzB,CAApB;AACD;AACF;AACD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA,SAASJ,oBAAT,CAA8BG,IAA9B,EAAoCV,KAApC,EAA2CW,SAA3C,EAAsDM,QAAtD,EAAgE;AAC9D,QAAM,IAAIH,KAAJ,CAAU,YAAYC,MAAZ,CAAmBJ,SAAnB,EAA8B,IAA9B,EAAoCI,MAApC,CAA2CL,IAA3C,EAAiD,UAAjD,EAA6DK,MAA7D,CAAoEE,QAApE,EAA8E,SAA9E,EAAyFF,MAAzF,CAAgGf,KAAhG,EAAuG,GAAvG,CAAV,CAAN;AACD","sourcesContent":["\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.validateBigint = validateBigint;\nexports.validateObject = validateObject;\nexports.validateOptionalObject = validateOptionalObject;\nexports.validateNumber = validateNumber;\nexports.validateString = validateString;\nexports.validateHexString = validateHexString;\nexports.throwValidationError = throwValidationError;\n\nvar _string = require(\"./string\");\n\n/**\n * Validates the given value as a bigint.\n *\n * @param name - The name of the value.\n * @param value - The actual value.\n * @param valueKind - The kind of value that is being checked (e.g. \"parameter\", \"response field\", etc.)\n * @throws - Will throw if not a valid bigint.\n */\nfunction validateBigint(name, value, valueKind) {\n  if (typeof value !== \"bigint\") {\n    throwValidationError(name, value, valueKind, \"type 'bigint'\");\n  }\n}\n/**\n * Validates the given value as an object.\n *\n * @param name - The name of the value.\n * @param value - The actual value.\n * @param valueKind - The kind of value that is being checked (e.g. \"parameter\", \"response field\", etc.)\n * @throws - Will throw if not a valid object.\n */\n\n\nfunction validateObject(name, value, valueKind) {\n  if (typeof value !== \"object\") {\n    throwValidationError(name, value, valueKind, \"type 'object'\");\n  }\n\n  if (value === null) {\n    throwValidationError(name, value, valueKind, \"non-null\");\n  }\n}\n/**\n * Validates the given value as an optional object.\n *\n * @param name - The name of the value.\n * @param value - The actual value.\n * @param valueKind - The kind of value that is being checked (e.g. \"parameter\", \"response field\", etc.)\n * @param model - A model object that contains all possible fields. 'value' does not need to have all fields, but it may not have any fields not contained in 'model'.\n * @throws - Will throw if not a valid optional object.\n */\n\n\nfunction validateOptionalObject(name, value, valueKind, model) {\n  if (!value) {\n    // This is okay, the object is optional.\n    return;\n  }\n\n  validateObject(name, value, valueKind); // Check if all given properties of value also exist in the model.\n\n  for (const property in value) {\n    if (!(property in model)) {\n      throw new Error(\"Object \".concat(valueKind, \" '\").concat(name, \"' contains unexpected property '\").concat(property, \"'\"));\n    }\n  }\n}\n/**\n * Validates the given value as a number.\n *\n * @param name - The name of the value.\n * @param value - The actual value.\n * @param valueKind - The kind of value that is being checked (e.g. \"parameter\", \"response field\", etc.)\n * @throws - Will throw if not a valid number.\n */\n\n\nfunction validateNumber(name, value, valueKind) {\n  if (typeof value !== \"number\") {\n    throwValidationError(name, value, valueKind, \"type 'number'\");\n  }\n}\n/**\n * Validates the given value as a string.\n *\n * @param name - The name of the value.\n * @param value - The actual value.\n * @param valueKind - The kind of value that is being checked (e.g. \"parameter\", \"response field\", etc.)\n * @throws - Will throw if not a valid string.\n */\n\n\nfunction validateString(name, value, valueKind) {\n  if (typeof value !== \"string\") {\n    throwValidationError(name, value, valueKind, \"type 'string'\");\n  }\n}\n/**\n * Validates the given value as a hex-encoded string.\n *\n * @param name - The name of the value.\n * @param value - The actual value.\n * @param valueKind - The kind of value that is being checked (e.g. \"parameter\", \"response field\", etc.)\n * @throws - Will throw if not a valid hex-encoded string.\n */\n\n\nfunction validateHexString(name, value, valueKind) {\n  validateString(name, value, valueKind);\n\n  if (!(0, _string.isHexString)(value)) {\n    throwValidationError(name, value, valueKind, \"a hex-encoded string\");\n  }\n}\n/**\n * Throws an error for the given value\n *\n * @param name - The name of the value.\n * @param value - The actual value.\n * @param valueKind - The kind of value that is being checked (e.g. \"parameter\", \"response field\", etc.)\n * @param expected - The expected aspect of the value that could not be validated (e.g. \"type 'string'\" or \"non-null\").\n * @throws - Will always throw.\n */\n\n\nfunction throwValidationError(name, value, valueKind, expected) {\n  throw new Error(\"Expected \".concat(valueKind, \" '\").concat(name, \"' to be \").concat(expected, \", was '\").concat(value, \"'\"));\n}"]},"metadata":{},"sourceType":"script"}